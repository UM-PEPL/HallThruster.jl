var documenterSearchIndex = {"docs":
[{"location":"collision_models/#Collision-models","page":"Collision models","title":"Collision models","text":"","category":"section"},{"location":"ionization_models/#Ionization-models","page":"Ionization models","title":"Ionization models","text":"","category":"section"},{"location":"wall_loss_models/#Wall-loss-models","page":"Wall loss models","title":"Wall loss models","text":"","category":"section"},{"location":"source_terms/#User-provided-source-terms","page":"User-provided source terms","title":"User-provided source terms","text":"","category":"section"},{"location":"anomalous_transport/#Anomalous-transport","page":"Anomalous transport","title":"Anomalous transport","text":"","category":"section"},{"location":"fluxes_and_numerics/#Fluxes-and-numerics","page":"Fluxes and numerics","title":"Fluxes and numerics","text":"","category":"section"},{"location":"initialization/#Initialization","page":"Initialization","title":"Initialization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HallThruster\nDocTestSetup = quote\n    using HallThruster\nend","category":"page"},{"location":"#HallThruster.jl","page":"Home","title":"HallThruster.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A 1D fluid Hall thruster code written in Julia. This will be filled in as the code is developed further.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = HallThruster","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [HallThruster]","category":"page"},{"location":"internals/#HallThruster.Air","page":"Internals","title":"HallThruster.Air","text":"Air::Gas\n\nEarth air at standard temperature and pressure\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Argon","page":"Internals","title":"HallThruster.Argon","text":"Argon::Gas\n\nArgon gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Electron","page":"Internals","title":"HallThruster.Electron","text":"Electron::Species\n\nElectron\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Krypton","page":"Internals","title":"HallThruster.Krypton","text":"Krypton::Gas\n\nKrypton gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.NA","page":"Internals","title":"HallThruster.NA","text":"NA\n\nNumber of atoms in a kg-mol (6.02214076e26 / kmol)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.R0","page":"Internals","title":"HallThruster.R0","text":"R0\n\nUniversal gas constant (8314.46261815324 J / kmol K)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Xenon","page":"Internals","title":"HallThruster.Xenon","text":"Xenon::Gas\n\nXenon gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.e","page":"Internals","title":"HallThruster.e","text":"e\n\nElectron charge (1.602176634e-19 Coulomb)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.kB","page":"Internals","title":"HallThruster.kB","text":"kB\n\nBoltzmann constant (1.380649e-23 J/K)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.me","page":"Internals","title":"HallThruster.me","text":"me\n\nElectron mass (9.10938356e-31 kilograms)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Gas","page":"Internals","title":"HallThruster.Gas","text":"Gas\n\nA chemical element in the gaseous state. Container for element properties used in fluid computations.\n\nFields\n\nname::String        Full name of gas (i.e. Xenon)\n\nshort_name::String  Short name/symbol (i.e. Xe for Xenon)\n\nγ::Float64          Specific heat ratio / adiabatic index\n\nM::Float64          Molar mass (grams/mol) or atomic mass units\n\nm::Float64          Mass of atom in kg\n\ncp::Float64         Specific heat at constant pressure in J / kg / K\n\ncv::Float64         Specific heat at constant volume in J / kg / K\n\nR::Float64          Gas constant in J / kg / K\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.Gas-Tuple{Any, Any}","page":"Internals","title":"HallThruster.Gas","text":"Gas(name::String, short_name::String; γ::Float64, M::Float64)\n\nInstantiate a new Gas, providing a name, short name, the adiabatic index, and the molar mass. Other gas properties, including gas constant, specific heats at constant pressure/volume, and mass of atom/molecule in kg will are then computed.\n\njulia> Gas(\"Xenon\", \"Xe\", γ = 5/3, M = 83.798)\nXenon\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.Species","page":"Internals","title":"HallThruster.Species","text":"Species\n\nRepresents a gas with a specific charge state. In a plasma, different ionization states of the same gas may coexist, so we need to be able to differentiate between these.\n\njulia> Species(Xenon, 0)\nXe\n\njulia> Species(Xenon, 1)\nXe+\n\njulia> Species(Xenon, 3)\nXe3+\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.ContinuityOnly-Tuple{}","page":"Internals","title":"HallThruster.ContinuityOnly","text":"ContinuityOnly\n\nA ConservationLawSystem in which only continuity (mass conservation) is solved, while velocity and temperature are held constant. Must specify a constant velocity (in m/s) and temperature (in K).\n\njulia> equation = ContinuityOnly(u = 300, T = 500)\n_ContinuityOnly(u = 300.0 m/s, T = 500.0 K)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.EulerEquations-Tuple{}","page":"Internals","title":"HallThruster.EulerEquations","text":"EulerEquations\n\nA ConservationLawSystem for the inviscid Navier-Stokes equations, better known as the Euler equations. Velocity and temperature are variable, so the values held in the ConservationLawSystem are set to zero and subsequently unused.\n\njulia> equation = EulerEquations()\n_EulerEquations()\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.IsothermalEuler-Tuple{}","page":"Internals","title":"HallThruster.IsothermalEuler","text":"IsothermalEuler\n\nA ConservationLawSystem in which only continuity and inviscid momentum are solved, while temperature is held constant. Must specify a constant temperature (in K).\n\njulia> equation = IsothermalEuler(T = 500)\n_IsothermalEuler(T = 500.0 K)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.SEE_yield-Tuple{HallThruster.WallMaterial, Any}","page":"Internals","title":"HallThruster.SEE_yield","text":"SEE_yield(material::WallMaterial, Tev)\n\nfit function for SEE with different wall materials Goebel Katz equ. 7.3-30\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.backward_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.backward_diff_coeffs","text":"backward_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a backward first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2\n\njulia> backward_diff_coeffs(-2//1, -1//1, 0//1)\n(1//2, -2//1, 3//2)\njulia> backward_diff_coeffs(-3//2, -1//1, 0//1)\n(4//3, -3//1, 5//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.backward_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.backward_difference","text":"backward_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x2\n\nf(x) = x^4\nx0, x1, x2 = 1.9999998, 1.9999999, 2\nbd = backward_difference(f(x0), f(x1), f(x2), x0, x1, x2)\nbd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.central_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.central_diff_coeffs","text":"central_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a central first derivative approximation at the point x1 on a three-point stencil at points x0, x1, and x2\n\njulia> central_diff_coeffs(-1//1, 0//1, 1//1)\n(-1//2, 0//1, 1//2)\njulia> central_diff_coeffs(-1//2, 0//1, 1//1)\n(-4//3, 1//1, 1//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.central_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.central_difference","text":"central_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x1\n\nf(x) = x^4\nx0, x1, x2 = 1.9999999, 2, 2.0000001\ncd = central_difference(f(x0), f(x1), f(x2), x0, x1, x2)\ncd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.channel_area-Tuple{Any, Any}","page":"Internals","title":"HallThruster.channel_area","text":"channel_area(outer_radius, inner_radius, length)\n\nCompute the area of a Hall thruster channel from its dimensions\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.channel_area-Tuple{HallThruster.Geometry1D}","page":"Internals","title":"HallThruster.channel_area","text":"channel_area(geometry::Geometry1D)\n\nCompute the area of the Hall thruster channel from the given Geometry1D object\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.compute_current-Tuple{Any, Any}","page":"Internals","title":"HallThruster.compute_current","text":"compute_current(sol, location)\n\ncompute current at anode or cathode = outflow in  1D code. \n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.compute_wall_sheath_potential-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.compute_wall_sheath_potential","text":"compute_wall_sheath_potential(Tev, γ, mi))\n\ncompute wall sheath to be used for radiative losses and loss to wall. Goebel Katz equ. 7.3-29, 7.3-44. Assumed nₑuₑ/nᵢuᵢ ≈ 0.5 Space charge limited above γ = 0.99. Currently only strictly valid for Xenon\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.coulomb_logarithm","page":"Internals","title":"HallThruster.coulomb_logarithm","text":"coulomb_logarithm(ne, Tev, Z = 1)\n\ncalculate coulomb logarithm for electron-ion collisions as a function of ion charge state Z, electron number density in m^-3, and electron temperature in eV.\n\n\n\n\n\n","category":"function"},{"location":"internals/#HallThruster.downwind_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.downwind_diff_coeffs","text":"downwind_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a downwind first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2 (uses only points x1 and x2)\n\njulia> downwind_diff_coeffs(-1//1, 0//1, 2//1)\n(0//1, -1//2, 1//2)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.effective_loss_frequency-Tuple{Any}","page":"Internals","title":"HallThruster.effective_loss_frequency","text":"effective_loss_frequency(Tev)\n\ncompute effective loss frequency for electron power loss to walls.  based on Half Maxwellian approximation and correction factor 2 for  energy lost per electron compared to average energy. Goebel-Katz equ. 7.3 - 45. \n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.electron_mobility-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.electron_mobility","text":"electron_mobility(νan::Float64, νc::Float64, B::Float64)\n\ncalculates electron transport according to the generalized Ohm's law as a function of the classical and anomalous collision frequencies and the magnetic field.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.forward_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.forward_diff_coeffs","text":"forward_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a forward first derivative approximation  at the point x0 on a three-point stencil at points x0, x1, and x2\n\njulia> forward_diff_coeffs(1.0, 2.0, 3.0)\n(-1.5, 2.0, -0.5)\njulia> forward_diff_coeffs(0//1, 1//2, 3//2)\n(-8//3, 3//1, -1//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.forward_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.forward_difference","text":"forward_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x0\n\nf(x) = x^4\nx0, x1, x2 = 2.0, 2.000001, 2.000002\nfd = forward_difference(f(x0), f(x1), f(x2), x0, x1, x2)\nfd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_electron-Tuple{Number, Number}","page":"Internals","title":"HallThruster.freq_electron_electron","text":"freq_electron_electron(ne, Tev)\n\nEffective frequency at which electrons are scattered due to collisions with other electrons\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_ion-Tuple{HallThruster.CollisionModel, Any, Any, Any}","page":"Internals","title":"HallThruster.freq_electron_ion","text":"freq_electron_ion(ne, Tev, Z)\n\nEffective frequency at which electrons are scattered due to collisions with ions\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_neutral-Tuple{HallThruster.NoCollisions, Any, Any}","page":"Internals","title":"HallThruster.freq_electron_neutral","text":"freq_electron_neutral(model::CollisionModel, nn, Tev)\n\nEffective frequency of electron scattering caused by collisions with neutrals\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.generate_grid-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.generate_grid","text":"generate_grid(geometry, ncells)\n\nGenerate a one-dimensional uniform grid on the domain specified in the geomety. Returns number of cells, coordinates of cell centers (plus ghost cells face coordinates), interface/edges and volume of a cell for number density calculations.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.interpolation_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.interpolation_coeffs","text":"interpolation_coeffs(x, x0, x1, y0, y1)\n\nCompute the coefficients for interpolation between two points (x0, y0) and (x1, y1) such that y = c0 * y0 + c1 * y1 ```jldoctest;setup = :(using HallThruster: itpcoeffs, lerp) julia> c0, c1 = interpolationcoeffs(0.5, 0.0, 1.0, 0.0, 2.0) (0.5, 0.5) julia> c0 * 0.0 + c1 * 2.0 == lerp(0.5, 0.0, 1.0, 0.0, 2.0) true\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.lerp-NTuple{5, Any}","page":"Internals","title":"HallThruster.lerp","text":"lerp(x, x0, x1, y0, y1)\n\nInterpolate between two points (x0, y0) and (x1, y1) ```jldoctest;setup = :(using HallThruster: lerp) julia> lerp(0.5, 0.0, 1.0, 0.0, 2.0) 1.0\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.maximum_charge_state-Tuple{HallThruster.IonizationModel}","page":"Internals","title":"HallThruster.maximum_charge_state","text":"maximum_charge_state(model::IonizationModel)::Int\n\nReturn the maximum supported charge state for a given ionization model\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.read_restart-Tuple{AbstractString}","page":"Internals","title":"HallThruster.read_restart","text":"read_restart(path::AbstractString)\n\nLoad a restart file from path.\n\nThe filetype can be anything supported by FileIO, though JLD2 is preferred.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.second_deriv_central_diff-NTuple{6, Any}","page":"Internals","title":"HallThruster.second_deriv_central_diff","text":"second_deriv_central_diff(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the second derivative at x1\n\nf(x) = x^4\nx0, x1, x2 = 1.9999, 2.0, 2.0001\nsd = second_deriv_central_diff(f(x0), f(x1), f(x2), x0, x1, x2)\nsd ≈ 48\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.second_deriv_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.second_deriv_coeffs","text":"second_deriv_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a central second derivative approximation at the point x1 on a three-point stencil at points x0, x1, and x2\n\njulia> second_deriv_coeffs(-2//1, 0//1, 2//1)\n(1//4, -1//2, 1//4)\njulia> second_deriv_coeffs(-1//2, 0//1, 1//1)\n(8//3, -4//1, 4//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.solve_potential_edge!-Tuple{Any, Any}","page":"Internals","title":"HallThruster.solve_potential_edge!","text":"solve_potential!(; U::Matrix{Float64}, params::NamedTuple)\n\nfunction to solve the potential equation derived from the generalized Ohm's law and employing charge conservation using quasineutrality. Second derivatives approximated with 2nd order central difference scheme, first derivatives with central difference. Centers of computational mesh placed on edges of fluid mesh, therefore edges correspond to boundaries for fluid. If required, interpolation is used to infer properties at mesh boundaries. Potential is a function of magnetic field, anomalous and classical collision frequency, neutral and ion density as well as ion velocity, and electron density and temperature leading to electron pressure. Solved by applying Thomas algorithm, which is of complexity O(n) and valid if matrix tridiagonal and diagonally dominant. The latter assumption almost always holds unless there is a huge discontinuity in either electron mobility or electron density.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.supported_gases-Tuple{HallThruster.IonizationModel}","page":"Internals","title":"HallThruster.supported_gases","text":"supported_gases(model::IonizationModel)::Vector{HallThruster.Gas}\n\nCheck which gases are supported by a given ionization model\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.timeaveraged-Tuple{Any, Any}","page":"Internals","title":"HallThruster.timeaveraged","text":"timeaveraged(sol, tstampstart)\n\ncompute timeaveraged solution, input HallThrusterSolution type and the timestamp at which averaging starts, end at endtime. \n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.upwind_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.upwind_diff_coeffs","text":"upwind_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a upwind first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2 (uses only points x0 and x1)\n\njulia> upwind_diff_coeffs(-3//1, 0//1, 2//1)\n(-1//3, 1//3, 0//1)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.write_restart-Tuple{AbstractString, Any}","page":"Internals","title":"HallThruster.write_restart","text":"write_restart(path::AbstractString, sol)\n\nWrite a restart file to path`.\n\nThis can be reloaded to resume a simulation. The filetype can be anything supported by FileIO, though JLD2 is preferred.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.σ_en-Tuple{Any}","page":"Internals","title":"HallThruster.σ_en","text":"σ_en(Tev)\n\nElectron neutral collision cross section in m² as a function of electron temperature in eV. Eq. 3.6-13, from Fundamentals of Electric Propulsion, Goebel and Katz, 2008.\n\n\n\n\n\n","category":"method"},{"location":"config/#Configuration","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"The Config struct contains all of the options you need to run a simulation. On this page, we will explain what options are available and what they do. Note that all arguments must be provided as keywords.","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"There are five absolutely mandatory arguments. These are:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"discharge_voltage: The difference in potential between the anode and cathode, in Volts. This is used to set the left boundary condition. If the cathode potential is zero, then the anode potential is equal to the discharge voltage.\nthruster: This is a Thruster object containing important geometric and magnetic information about the thruster being simulated. See the page about Thrusters for more.\ndomain: This is a Tuple containing the locations of the left and right boundaries of the simulation domain, in meters. For instance, if your simulation domain starts at z = 0.0 and is 5 cm long, you would write domain = (0.0, 0.05).\nanode_mass_flow_rate: The propellant mass flow rate at the anode, in kg/s\ninitial_condition!: A function used for initializing the simulation. See the page about Initialization for more information.","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Aside from these arguments, all others have  default values provided. These are detailed below:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"ncharge: Number of charge states to simulate. Defaults to 1.\npropellant: Propellant gas. Defaults to Xenon. Other options are described on the Gases and Species page.\nscheme: Numerical scheme to employ for integrating the ion equations. This is a HyperbolicScheme struct with fields flux_function, limiter, and reconstruct. Defaults to HyperbolicScheme(flux = rusanov, limiter = minmod, reconstruct = false). For more information, see Fluxes and Numerics.\ncathode_potential: The potential at the right boundary of the simulation. Defaults to 0.0\nanode_Te: The electron temperature at the anode, in eV. Acts as a Dirichlet boundary condition for the energy equation. Defaults to 3.0.\ncathode_Te: The electron temperature at the cathode, in eV. Acts as a Dirichlet boundary condition for the energy equation. Defaults to 3.0.\nwall_loss_model: How radial losses due to sheaths are computed. Defaults to ConstantSheathPotential(sheath_potential=-20.0, inner_loss_coeff = 1.0, outer_loss_coeff = 1.0), which is the loss term from LANDMARK case 1. Other wall loss models are described on the Wall Loss Models page.\nwall_collision_freq: Extra \"wall collisions\" to be added to the total electron momentum transfer collision frequency inside of the channel.  Units of Hz. Defaults to 0.0.\nanom_model: Model for computing the anomalous collision frequency. Defaults to TwoZoneBohm(1/160, 1/16). Further details on the Anomalous Transport page.\nionization_model: Model for ionization. Defaults to BolsigIonizationLUT(), which uses a lookup table derived from BOLSIG+ to compute ionization rate coefficients as a function of electron energy. Other options are described on the Ionization Models page.\ncollision_model: Model for classical momentum transfer collisions. Defaults to SimpleElectronNeutral(), in which nu_en = 25times10^-13 n_n and nu_ei = 00, which is the form used in the LANDMARK benchmark. Other models with higher fidelity are described on the Collision Models page.\ncollisional_loss_model: Model for electron energy losses due to inelastic collisions. Defaults to LandmarkLossLUT, which is the loss term used in the LANDMARK benchmark. Other models are described on the Collision Models page.\nneutral_velocity: Neutral velocity in m/s. Defaults to 300.0\nneutral_temperature: Neutral temperature in Kelvins. Defaults to 300.0.\nion_temperature: Ion temperature in Kelvins. Defaults to 100.0\nelectron_pressure_coupled: Whether to use an electron-pressure-coupled method for the ions.  When using a coupled scheme, ion speed of sound is raised from the thermal speed to the ion acoustic speed, which reduces numerical oscillations around the ion stagnation point. Partial coupling is possible by supplying a value between zero and one, where zero is fully uncoupled and one is fully coupled. Described further in K. Hara, Non-oscillatory quasineutral fluid model of cross-field discharge plasmas, Physics of Plasmas 25, 123508, 2018. Defaults to 1.0.\nimplicit_energy: The degree to which the energy is solved implicitly. 0.0 is a fully-explicit forward Euler, 0.5 is Crank-Nicholson, and 1.0 is backward Euler. Defaults to 1.0.\nmin_number_density: Minimum allowable number density for any species. Defaults to 1e6\nmin_electron_temperature: Minimum allowable electron temperature. Defaults to 1.0.\ncallback: User-provided callback. This can by any standard callback from DifferentialEquations.jl. Defaults to nothing.\nmagnetic_field_scale: Factor by which the magnetic field is increased or decreased compared to the one in the provided Thruster struct. Defaults to 1.0.\nsource_neutrals: Extra user-provided neutral source term. Can be an arbitrary function, but must take (U, params, i) as arguments. Defaults to Returns(0.0). See User-Provided Source Terms for more information.\nsource_ion_continuity: Vector of extra source terms for ion continuity, one for each charge state. Defaults to fill(Returns(0.0), ncharge) . See User-Provided Source Terms for more information.\nsource_ion_momentum: Vector of extra source terms for ion momentum, one for each charge state. Defaults to fill(Returns(0.0), ncharge) . See User-Provided Source Terms for more information.\nsource_potential: Extra source term for potential equation. Defaults to Returns(0.0). See User-Provided Source Terms for more information.\nsource_electron_energy: Extra source term for electron energy equation. Defaults to Returns(0.0). See User-Provided Source Terms for more information.","category":"page"}]
}
