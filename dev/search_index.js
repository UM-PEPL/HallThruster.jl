var documenterSearchIndex = {"docs":
[{"location":"collision_models/#Collision-Models","page":"Collision Models","title":"Collision Models","text":"","category":"section"},{"location":"wall_loss_models/#Wall-Loss-Models","page":"Wall Loss Models","title":"Wall Loss Models","text":"","category":"section"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"HallThruster.jl allows you to choose from three different wall loss models. They approximate the electron energy lost to the thruster walls in radial direction. As the computational axis of the 1D code is axially in the thruster, the wall loss is not directly resolved by the fluid and applied in each cell as an electron energy loss term. ","category":"page"},{"location":"wall_loss_models/#Background","page":"Wall Loss Models","title":"Background","text":"","category":"section"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"The core of the wall loss models in HallThruster.jl is the abstract type WallLossModel. It has three struct children: NoWallLosses, ConstantSheathPotential, and WallSheath. ConstantSheathPotential has three fields. A wall sheath_potential to be set by the user, and an inner_loss_coeff and outer_loss_coeff which allow to scale the energy loss inside vs. outside the thruster channel. WallSheath has one field material, which is of struct WallMaterial.","category":"page"},{"location":"wall_loss_models/#Provided-wall-loss-models","page":"Wall Loss Models","title":"Provided wall loss models","text":"","category":"section"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"HallThruster.jl provides three models out of the box. These are","category":"page"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"Model Supported species Description\nNoWallLosses Any Ignores electron energy losses to the walls. May cause numerical issues.\nConstantSheathPotential Any Employs a simple sheath energy loss model with constant sheath potential, based on the electron Boltzmann equation for electron density in the sheath as a function of electron temperature. Uses constants to scale losses inside and outside the thruster. See also JP Boeuf, Low frequency oscillations in a stationary plasma thruster, Journal of Applied Physics 84, 3541, 1998 and Landmark study\nWallSheath Xenon Conceputally similar loss model as ConstantSheathPotential, but evaluates constants and sheath potential given in the previously mentioned using approximations. The effective collision frequency follows from a half-maxwellian approximation.  The sheath potential  is evaluated as a function of secondary electron emission, which is a function of wall material, and electron temperature. This model is based on Hobbs and Wesson, Heat flow through a Langmuir sheath in the presence of electron emission, Plasma Physics 9 85, 1967 and described in Goebel and Katz, Fundamentals of Electric Propulsion, JPL Science and Technology series, 2008","category":"page"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"The density relation in the 'WallSheath' model is based upon the electron Boltzmann relation. ","category":"page"},{"location":"verification/#Verification","page":"Verification","title":"Verification","text":"","category":"section"},{"location":"config/#Configuration","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"The Config struct contains all of the options you need to run a simulation. On this page, we will explain what options are available and what they do. Note that all arguments must be provided as keywords.","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"There are five absolutely mandatory arguments. These are:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"discharge_voltage: The difference in potential between the anode and cathode, in Volts. This is used to set the left boundary condition. If the cathode potential is zero, then the anode potential is equal to the discharge voltage.\nthruster: This is a Thruster object containing important geometric and magnetic information about the thruster being simulated. See the page about Thrusters for more.\ndomain: This is a Tuple containing the locations of the left and right boundaries of the simulation domain, in meters. For instance, if your simulation domain starts at z = 0.0 and is 5 cm long, you would write domain = (0.0, 0.05).\nanode_mass_flow_rate: The propellant mass flow rate at the anode, in kg/s\ninitial_condition!: A function used for initializing the simulation. See the page about Initialization for more information.","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Aside from these arguments, all others have  default values provided. These are detailed below:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"ncharge: Number of charge states to simulate. Defaults to 1.\npropellant: Propellant gas. Defaults to Xenon. Other options are described on the Gases and Species page.\nscheme: Numerical scheme to employ for integrating the ion equations. This is a HyperbolicScheme struct with fields flux_function, limiter, and reconstruct. Defaults to HyperbolicScheme(flux = rusanov, limiter = minmod, reconstruct = false). For more information, see Fluxes and Numerics.\ncathode_potential: The potential at the right boundary of the simulation. Defaults to 0.0\nanode_Te: The electron temperature at the anode, in eV. Acts as a Dirichlet boundary condition for the energy equation. Defaults to 3.0.\ncathode_Te: The electron temperature at the cathode, in eV. Acts as a Dirichlet boundary condition for the energy equation. Defaults to 3.0.\nwall_loss_model: How radial losses due to sheaths are computed. Defaults to ConstantSheathPotential(sheath_potential=-20.0, inner_loss_coeff = 1.0, outer_loss_coeff = 1.0), which is the loss term from LANDMARK case 1. Other wall loss models are described on the Wall Loss Models page.\nwall_collision_freq: Extra \"wall collisions\" to be added to the total electron momentum transfer collision frequency inside of the channel.  Units of Hz. Defaults to 0.0.\nanom_model: Model for computing the anomalous collision frequency. Defaults to TwoZoneBohm(1/160, 1/16). Further details on the Anomalous Transport page.\nionization_model: Model for ionization. Defaults to IonizationLUT(), which uses a lookup table to compute ionization rate coefficients as a function of electron energy. Other options are described on the Ionization Models page.\ncollision_model: Model for classical momentum transfer collisions. Defaults to SimpleElectronNeutral(), in which nu_en = 25times10^-13 n_n and nu_ei = 00, which is the form used in the LANDMARK benchmark. Other models with higher fidelity are described on the Collision Models page.\ncollisional_loss_model: Model for electron energy losses due to inelastic collisions. Defaults to LandmarkLossLUT, which is the loss term used in the LANDMARK benchmark. Other models are described on the Collision Models page.\nneutral_velocity: Neutral velocity in m/s. Defaults to 300.0\nneutral_temperature: Neutral temperature in Kelvins. Defaults to 300.0.\nion_temperature: Ion temperature in Kelvins. Defaults to 100.0\nelectron_pressure_coupled: Whether to use an electron-pressure-coupled method for the ions.  When using a coupled scheme, ion speed of sound is raised from the thermal speed to the ion acoustic speed, which reduces numerical oscillations around the ion stagnation point. Partial coupling is possible by supplying a value between zero and one, where zero is fully uncoupled and one is fully coupled. Described further in K. Hara, Non-oscillatory quasineutral fluid model of cross-field discharge plasmas, Physics of Plasmas 25, 123508, 2018. Defaults to 1.0.\nimplicit_energy: The degree to which the energy is solved implicitly. 0.0 is a fully-explicit forward Euler, 0.5 is Crank-Nicholson, and 1.0 is backward Euler. Defaults to 1.0.\nmin_number_density: Minimum allowable number density for any species. Defaults to 1e6\nmin_electron_temperature: Minimum allowable electron temperature. Defaults to 1.0.\ncallback: User-provided callback. This can by any standard callback from DifferentialEquations.jl. Defaults to nothing.\nmagnetic_field_scale: Factor by which the magnetic field is increased or decreased compared to the one in the provided Thruster struct. Defaults to 1.0.\nsource_neutrals: Extra user-provided neutral source term. Can be an arbitrary function, but must take (U, params, i) as arguments. Defaults to Returns(0.0). See User-Provided Source Terms for more information.\nsource_ion_continuity: Vector of extra source terms for ion continuity, one for each charge state. Defaults to fill(Returns(0.0), ncharge) . See User-Provided Source Terms for more information.\nsource_ion_momentum: Vector of extra source terms for ion momentum, one for each charge state. Defaults to fill(Returns(0.0), ncharge) . See User-Provided Source Terms for more information.\nsource_potential: Extra source term for potential equation. Defaults to Returns(0.0). See User-Provided Source Terms for more information.\nsource_electron_energy: Extra source term for electron energy equation. Defaults to Returns(0.0). See User-Provided Source Terms for more information.","category":"page"},{"location":"ionization_models/#Ionization-Models","page":"Ionization Models","title":"Ionization Models","text":"","category":"section"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"HallThruster.jl allows you to choose from a number of different ionization models, or supply your own. This allows you to implement different propellants or more charge states for an existing propellant.","category":"page"},{"location":"ionization_models/#Background","page":"Ionization Models","title":"Background","text":"","category":"section"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"The core of the ionization model in HallThruster.jl is the IonizationReaction struct. It has three fields: reactant, product, and rate_coeff. The first two are Species objects, while the third is an arbitrary function. This rate_coeff computes the ionization reaction rate coefficient (in m^3/s) provided the electron energy (in eV).  It is used in heavy species source terms in order to compute the production or destruction of the reactant and product due to ionization, and in the electron energy equation in order to compute electron energy losses due to inelastic ionization collisions.  ","category":"page"},{"location":"ionization_models/#Provided-ionization-models","page":"Ionization Models","title":"Provided ionization models","text":"","category":"section"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"HallThruster.jl provides three models out of the box. These are","category":"page"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"Model Supported species Maximum charge state Description\nLandmarkIonizationLUT Xenon 1 Lookup table provided for the LANDMARK benchmark. Table is stored in the landmark subfolder of the HallThruster.jl directory.\nIonizationLUT Xenon, Krypton (out of the box. With user-provided tables, can support any species) 3 Ionization look-up table for species provided with HallThruster.jl. By default, the tables are stored in the reactions subfolder of the HallThruster.jl directory, but the user may provide additional directories in which to look for tables.\nIonizationFit Xenon 3 Fit to Xenon ionization look-up table from the IonizationLUT model.","category":"page"},{"location":"ionization_models/#LandmarkIonizationLUT","page":"Ionization Models","title":"LandmarkIonizationLUT","text":"","category":"section"},{"location":"ionization_models/#IonizationLUT","page":"Ionization Models","title":"IonizationLUT","text":"","category":"section"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"To use the IonizationLUT model, initialize it as follows:","category":"page"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"ionization_model = IonizationLUT([extra_paths::Vector{AbstractString = String[]}])","category":"page"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"If extra_paths is empty, the HallThruster.jl will only look in the reactions subfolder of the HallThruster.jl main directory. Otherwise, HallThruster.jl will preferentially look in extra_paths before before falling back to the included tables. If two files in user-provided directories have the same name, HallThruster.jl will pick the one in the directory which comes first in extra_paths.","category":"page"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"Inside of the folders listed in extra_paths, HallThruster.jl will look for rate coefficient files matching the desired propellant gas and maximum charge state.  The rate coefficient files must be named as follows in order to be found.","category":"page"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"ionization_$(reactant.symbol)_$(reactant.Z)+_$(product.symbol)_$(product.Z)+.dat","category":"page"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"For example, for a reaction file containing rate coefficients for direct double ionization of Bismuth, you would name the file ionization_Bi_Bi2+.dat, or for Argon II being ionized to Argon III, it would be ionization_Ar2+_Ar3+.dat. ","category":"page"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"The rate coefficient files must have a header row (which is skipped on load), followed by two tab-delimited columns. The first should have the rate coefficient in m^3/s, and the second should have the electron energy (note: this is 3/2 Te) in electron-Volts. The first few rows of the ionization_Kr_Kr+.dat folder thus reads","category":"page"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"Energy (eV)\tRate coefficient (m3/s)\n1.0\t1.812780887933804e-23\n2.0\t6.784605416289418e-19\n3.0\t2.86241339516785e-17\n4.0\t2.0154931458303006e-16\n5.0\t6.77202352079487e-16\n6.0\t1.5567995341077301e-15\n7.0\t2.8667673314913722e-15","category":"page"},{"location":"ionization_models/#IonizationFit","page":"Ionization Models","title":"IonizationFit","text":"","category":"section"},{"location":"ionization_models/#The-IonizationModel-interface","page":"Ionization Models","title":"The IonizationModel interface","text":"","category":"section"},{"location":"ionization_models/","page":"Ionization Models","title":"Ionization Models","text":"On ","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = HallThruster","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [HallThruster]","category":"page"},{"location":"internals/#HallThruster.Air","page":"Internals","title":"HallThruster.Air","text":"Air::Gas\n\nEarth air at standard temperature and pressure\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Argon","page":"Internals","title":"HallThruster.Argon","text":"Argon::Gas\n\nArgon gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Electron","page":"Internals","title":"HallThruster.Electron","text":"Electron::Species\n\nElectron\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Krypton","page":"Internals","title":"HallThruster.Krypton","text":"Krypton::Gas\n\nKrypton gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.NA","page":"Internals","title":"HallThruster.NA","text":"NA\n\nNumber of atoms in a kg-mol (6.02214076e26 / kmol)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.R0","page":"Internals","title":"HallThruster.R0","text":"R0\n\nUniversal gas constant (8314.46261815324 J / kmol K)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Xenon","page":"Internals","title":"HallThruster.Xenon","text":"Xenon::Gas\n\nXenon gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.e","page":"Internals","title":"HallThruster.e","text":"e\n\nElectron charge (1.602176634e-19 Coulomb)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.kB","page":"Internals","title":"HallThruster.kB","text":"kB\n\nBoltzmann constant (1.380649e-23 J/K)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.me","page":"Internals","title":"HallThruster.me","text":"me\n\nElectron mass (9.10938356e-31 kilograms)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Gas","page":"Internals","title":"HallThruster.Gas","text":"Gas\n\nA chemical element in the gaseous state. Container for element properties used in fluid computations.\n\nFields\n\nname::String        Full name of gas (i.e. Xenon)\n\nshort_name::String  Short name/symbol (i.e. Xe for Xenon)\n\nγ::Float64          Specific heat ratio / adiabatic index\n\nM::Float64          Molar mass (grams/mol) or atomic mass units\n\nm::Float64          Mass of atom in kg\n\ncp::Float64         Specific heat at constant pressure in J / kg / K\n\ncv::Float64         Specific heat at constant volume in J / kg / K\n\nR::Float64          Gas constant in J / kg / K\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.Gas-Tuple{Any, Any}","page":"Internals","title":"HallThruster.Gas","text":"Gas(name::String, short_name::String; γ::Float64, M::Float64)\n\nInstantiate a new Gas, providing a name, short name, the adiabatic index, and the molar mass. Other gas properties, including gas constant, specific heats at constant pressure/volume, and mass of atom/molecule in kg will are then computed.\n\njulia> Gas(\"Xenon\", \"Xe\", γ = 5/3, M = 83.798)\nXenon\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.Species","page":"Internals","title":"HallThruster.Species","text":"Species\n\nRepresents a gas with a specific charge state. In a plasma, different ionization states of the same gas may coexist, so we need to be able to differentiate between these.\n\njulia> Species(Xenon, 0)\nXe\n\njulia> Species(Xenon, 1)\nXe+\n\njulia> Species(Xenon, 3)\nXe3+\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.ContinuityOnly-Tuple{}","page":"Internals","title":"HallThruster.ContinuityOnly","text":"ContinuityOnly\n\nA ConservationLawSystem in which only continuity (mass conservation) is solved, while velocity and temperature are held constant. Must specify a constant velocity (in m/s) and temperature (in K).\n\njulia> equation = ContinuityOnly(u = 300, T = 500)\n_ContinuityOnly(u = 300.0 m/s, T = 500.0 K)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.EulerEquations-Tuple{}","page":"Internals","title":"HallThruster.EulerEquations","text":"EulerEquations\n\nA ConservationLawSystem for the inviscid Navier-Stokes equations, better known as the Euler equations. Velocity and temperature are variable, so the values held in the ConservationLawSystem are set to zero and subsequently unused.\n\njulia> equation = EulerEquations()\n_EulerEquations()\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.IsothermalEuler-Tuple{}","page":"Internals","title":"HallThruster.IsothermalEuler","text":"IsothermalEuler\n\nA ConservationLawSystem in which only continuity and inviscid momentum are solved, while temperature is held constant. Must specify a constant temperature (in K).\n\njulia> equation = IsothermalEuler(T = 500)\n_IsothermalEuler(T = 500.0 K)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.SEE_yield-Tuple{HallThruster.WallMaterial, Any}","page":"Internals","title":"HallThruster.SEE_yield","text":"SEE_yield(material::WallMaterial, Tev)\n\nfit function for SEE with different wall materials Goebel Katz equ. 7.3-30\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.backward_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.backward_diff_coeffs","text":"backward_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a backward first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2\n\njulia> backward_diff_coeffs(-2//1, -1//1, 0//1)\n(1//2, -2//1, 3//2)\njulia> backward_diff_coeffs(-3//2, -1//1, 0//1)\n(4//3, -3//1, 5//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.backward_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.backward_difference","text":"backward_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x2\n\nf(x) = x^4\nx0, x1, x2 = 1.9999998, 1.9999999, 2\nbd = backward_difference(f(x0), f(x1), f(x2), x0, x1, x2)\nbd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.central_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.central_diff_coeffs","text":"central_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a central first derivative approximation at the point x1 on a three-point stencil at points x0, x1, and x2\n\njulia> central_diff_coeffs(-1//1, 0//1, 1//1)\n(-1//2, 0//1, 1//2)\njulia> central_diff_coeffs(-1//2, 0//1, 1//1)\n(-4//3, 1//1, 1//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.central_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.central_difference","text":"central_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x1\n\nf(x) = x^4\nx0, x1, x2 = 1.9999999, 2, 2.0000001\ncd = central_difference(f(x0), f(x1), f(x2), x0, x1, x2)\ncd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.channel_area-Tuple{Any, Any}","page":"Internals","title":"HallThruster.channel_area","text":"channel_area(outer_radius, inner_radius, length)\n\nCompute the area of a Hall thruster channel from its dimensions\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.channel_area-Tuple{HallThruster.Geometry1D}","page":"Internals","title":"HallThruster.channel_area","text":"channel_area(geometry::Geometry1D)\n\nCompute the area of the Hall thruster channel from the given Geometry1D object\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.compute_current","page":"Internals","title":"HallThruster.compute_current","text":"compute_current(sol, location)\n\ncompute current at anode or cathode = outflow in  1D code. \n\n\n\n\n\n","category":"function"},{"location":"internals/#HallThruster.compute_wall_sheath_potential-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.compute_wall_sheath_potential","text":"compute_wall_sheath_potential(Tev, γ, mi))\n\ncompute wall sheath to be used for radiative losses and loss to wall. Goebel Katz equ. 7.3-29, 7.3-44. Assumed nₑuₑ/nᵢuᵢ ≈ 0.5 Space charge limited above γ = 0.99. Currently only strictly valid for Xenon\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.coulomb_logarithm","page":"Internals","title":"HallThruster.coulomb_logarithm","text":"coulomb_logarithm(ne, Tev, Z = 1)\n\ncalculate coulomb logarithm for electron-ion collisions as a function of ion charge state Z, electron number density in m^-3, and electron temperature in eV.\n\n\n\n\n\n","category":"function"},{"location":"internals/#HallThruster.downwind_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.downwind_diff_coeffs","text":"downwind_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a downwind first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2 (uses only points x1 and x2)\n\njulia> downwind_diff_coeffs(-1//1, 0//1, 2//1)\n(0//1, -1//2, 1//2)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.effective_loss_frequency-Tuple{Any}","page":"Internals","title":"HallThruster.effective_loss_frequency","text":"effective_loss_frequency(Tev)\n\ncompute effective loss frequency for electron power loss to walls.  based on Half Maxwellian approximation and correction factor 2 for  energy lost per electron compared to average energy. Goebel-Katz equ. 7.3 - 45. \n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.electron_mobility-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.electron_mobility","text":"electron_mobility(νan::Float64, νc::Float64, B::Float64)\n\ncalculates electron transport according to the generalized Ohm's law as a function of the classical and anomalous collision frequencies and the magnetic field.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.forward_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.forward_diff_coeffs","text":"forward_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a forward first derivative approximation  at the point x0 on a three-point stencil at points x0, x1, and x2\n\njulia> forward_diff_coeffs(1.0, 2.0, 3.0)\n(-1.5, 2.0, -0.5)\njulia> forward_diff_coeffs(0//1, 1//2, 3//2)\n(-8//3, 3//1, -1//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.forward_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.forward_difference","text":"forward_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x0\n\nf(x) = x^4\nx0, x1, x2 = 2.0, 2.000001, 2.000002\nfd = forward_difference(f(x0), f(x1), f(x2), x0, x1, x2)\nfd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_electron-Tuple{Number, Number}","page":"Internals","title":"HallThruster.freq_electron_electron","text":"freq_electron_electron(ne, Tev)\n\nEffective frequency at which electrons are scattered due to collisions with other electrons\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_ion-Tuple{HallThruster.CollisionModel, Any, Any, Any}","page":"Internals","title":"HallThruster.freq_electron_ion","text":"freq_electron_ion(ne, Tev, Z)\n\nEffective frequency at which electrons are scattered due to collisions with ions\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_neutral-Tuple{HallThruster.NoCollisions, Any, Any}","page":"Internals","title":"HallThruster.freq_electron_neutral","text":"freq_electron_neutral(model::CollisionModel, nn, Tev)\n\nEffective frequency of electron scattering caused by collisions with neutrals\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.generate_grid-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.generate_grid","text":"generate_grid(geometry, ncells)\n\nGenerate a one-dimensional uniform grid on the domain specified in the geomety. Returns number of cells, coordinates of cell centers (plus ghost cells face coordinates), interface/edges and volume of a cell for number density calculations.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.interpolation_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.interpolation_coeffs","text":"interpolation_coeffs(x, x0, x1, y0, y1)\n\nCompute the coefficients for interpolation between two points (x0, y0) and (x1, y1) such that y = c0 * y0 + c1 * y1 ```jldoctest;setup = :(using HallThruster: itpcoeffs, lerp) julia> c0, c1 = interpolationcoeffs(0.5, 0.0, 1.0, 0.0, 2.0) (0.5, 0.5) julia> c0 * 0.0 + c1 * 2.0 == lerp(0.5, 0.0, 1.0, 0.0, 2.0) true\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.lerp-NTuple{5, Any}","page":"Internals","title":"HallThruster.lerp","text":"lerp(x, x0, x1, y0, y1)\n\nInterpolate between two points (x0, y0) and (x1, y1) ```jldoctest;setup = :(using HallThruster: lerp) julia> lerp(0.5, 0.0, 1.0, 0.0, 2.0) 1.0\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.maximum_charge_state-Tuple{HallThruster.IonizationModel}","page":"Internals","title":"HallThruster.maximum_charge_state","text":"maximum_charge_state(model::IonizationModel)::Int\n\nReturn the maximum supported charge state for a given ionization model\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.read_restart-Tuple{AbstractString}","page":"Internals","title":"HallThruster.read_restart","text":"read_restart(path::AbstractString)\n\nLoad a restart file from path.\n\nThe filetype can be anything supported by FileIO, though JLD2 is preferred.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.second_deriv_central_diff-NTuple{6, Any}","page":"Internals","title":"HallThruster.second_deriv_central_diff","text":"second_deriv_central_diff(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the second derivative at x1\n\nf(x) = x^4\nx0, x1, x2 = 1.9999, 2.0, 2.0001\nsd = second_deriv_central_diff(f(x0), f(x1), f(x2), x0, x1, x2)\nsd ≈ 48\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.second_deriv_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.second_deriv_coeffs","text":"second_deriv_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a central second derivative approximation at the point x1 on a three-point stencil at points x0, x1, and x2\n\njulia> second_deriv_coeffs(-2//1, 0//1, 2//1)\n(1//4, -1//2, 1//4)\njulia> second_deriv_coeffs(-1//2, 0//1, 1//1)\n(8//3, -4//1, 4//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.solve_potential_edge!-Tuple{Any, Any}","page":"Internals","title":"HallThruster.solve_potential_edge!","text":"solve_potential_edge!(; U::Matrix{Float64}, params::NamedTuple)\n\nfunction to solve the potential equation derived from the generalized Ohm's law and employing charge conservation using quasineutrality. Second derivatives approximated with 2nd order central difference scheme, first derivatives with central difference. Centers of computational mesh placed on edges of fluid mesh, therefore edges correspond to boundaries for fluid. If required, interpolation is used to infer properties at mesh boundaries. Potential is a function of magnetic field, anomalous and classical collision frequency, neutral and ion density as well as ion velocity, and electron density and temperature leading to electron pressure. Solved by applying Thomas algorithm, which is of complexity O(n) and valid if matrix tridiagonal and diagonally dominant. The latter assumption almost always holds unless there is a huge discontinuity in either electron mobility or electron density.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.supported_gases-Tuple{HallThruster.CollisionModel}","page":"Internals","title":"HallThruster.supported_gases","text":"supported_gases(model::CollisionModel)::Vector{HallThruster.Gas}\n\nCheck which gases are supported by a given collision model\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.supported_gases-Tuple{HallThruster.IonizationModel}","page":"Internals","title":"HallThruster.supported_gases","text":"supported_gases(model::IonizationModel)::Vector{HallThruster.Gas}\n\nCheck which gases are supported by a given ionization model\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.timeaveraged-Tuple{Any, Any}","page":"Internals","title":"HallThruster.timeaveraged","text":"timeaveraged(sol, tstampstart)\n\ncompute timeaveraged solution, input HallThrusterSolution type and the timestamp at which averaging starts, end at endtime. \n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.upwind_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.upwind_diff_coeffs","text":"upwind_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a upwind first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2 (uses only points x0 and x1)\n\njulia> upwind_diff_coeffs(-3//1, 0//1, 2//1)\n(-1//3, 1//3, 0//1)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.write_restart-Tuple{AbstractString, Any}","page":"Internals","title":"HallThruster.write_restart","text":"write_restart(path::AbstractString, sol)\n\nWrite a restart file to path`.\n\nThis can be reloaded to resume a simulation. The filetype can be anything supported by FileIO, though JLD2 is preferred.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.σ_en-Tuple{Any}","page":"Internals","title":"HallThruster.σ_en","text":"σ_en(Tev)\n\nElectron neutral collision cross section in m² as a function of electron temperature in eV. Eq. 3.6-13, from Fundamentals of Electric Propulsion, Goebel and Katz, 2008.\n\n\n\n\n\n","category":"method"},{"location":"boundary_conditions/#Boundary-Conditions","page":"Boundary Conditions","title":"Boundary Conditions","text":"","category":"section"},{"location":"boundary_conditions/","page":"Boundary Conditions","title":"Boundary Conditions","text":"HallThruster.jl solves fluid hyperbolic conservation laws. As such, boundary conditions on at least one side have to be specified. Dirichlet boundary conditions on both sides in the potential equation. ","category":"page"},{"location":"boundary_conditions/#Background","page":"Boundary Conditions","title":"Background","text":"","category":"section"},{"location":"boundary_conditions/","page":"Boundary Conditions","title":"Boundary Conditions","text":"The outflow side, which in the 1D domain conincides with the cathode, is usually left unspecified, i.e. no boundary conditions are applied. On the left side, corresponding to the anode, the neutral mass inflow is fixed, while the ion velocity is forced to be at least the Bohm velocity. The anode mass flow rate can be set in the Configuration. The potential employs Dirichlet boundary conditions at both anode and cathode (subject to change once a more accurate anode sheath model has been implemented). Currently the cathode potential is set to zero, and the anode potential can be set using discharge_voltage in the Configuration. The electron energy uses Dirichlet boundaries as well on both the anode and cathode, usually fixed to 2 or 3 eV. Note that this does not correspond to Dirichlet boundaries on the internal energy equations, since this is solved for the product of internal energy and density. ","category":"page"},{"location":"source_terms/#User-Provided-Source-Terms","page":"User-Provided Source Terms","title":"User-Provided Source Terms","text":"","category":"section"},{"location":"anomalous_transport/#Anomalous-Transport","page":"Anomalous Transport","title":"Anomalous Transport","text":"","category":"section"},{"location":"initialization/#Initialization","page":"Initialization","title":"Initialization","text":"","category":"section"},{"location":"physics/#Physics-model","page":"Physics model","title":"Physics model","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"HallThruster.jl solves the quasineutral plasma equations of motion for a Hall Thruster along the thruster's channel centerline (the z-axis). We solve seperate models for neutral particles, ions, and electrons. Neutrals are assumed to have (user-configurable) constant velocity and temperature and are tracked by a single continuity equation. Ions are assumed isothermal and unmagnetized. Multiple ion species with different charge states are supported, and each is tracked by a continuity equation and a momentum equation. We employ the drift-diffusion approximation for electrons, which reduces the electron momentum equation to a generalized Ohm's law. Charge conservation is then used to solve for the electrostatic potential. The electron temperature is determined by solving an equation for the conservation of electron internal energy.","category":"page"},{"location":"physics/#Neutrals","page":"Physics model","title":"Neutrals","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"For neutrals, the continuity equation is solved:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartial n_npartial t + fracpartialpartial z (n_n u_n) = dotn_n","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here, n_n is the neutral number density in m^-3, mathbfu_n is the neutral velocity vector in m/s, and dotn_n is the rate of neutral depletion due to ionization in  m^-3s^-1, which is given by","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    dotn_n = -sum_j = 1^3 n_e n_n k_nj(T_e)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"where n_e is the electron number density j represents the ion charge state (i.e. j = 1 represents singly-charged ions, and so on), T_e is the electron temperature, and k_nj is the rate coefficient of the ionization reaction","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"A + e- - A^j+ + (j + 1) e-","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"where A represents the gas species being simulated. Currently, the code is compatible with Xenon and Krypton. The reaction rate coefficients are generated as a function of electron temperature using the BOLSIG+ code. We read in a table of these rate coefficients with electron temperature and use the Interpolations.jl to generate transform this data into a continuous function. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The neutrals are assumed to have a constant velocity in the axial direction and a constant temperature, and are thus approximated monoenergetic and not Maxwellian. The neutral momentum and energy equations are not solved for. ","category":"page"},{"location":"physics/#Ions","page":"Physics model","title":"Ions","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"We solve continuity and momentum for each ion species. We may have the option for an ion energy equation, but for now they are treated as isothermal. The ion continuity equation for ions with charge j is","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartial n_ijpartial t + fracpartialpartial z (n_ij u_ij) = dotn_ij","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here n_ij, u_ij, and dotn_ij are the number density, velocity, and net rate of production of ions with charge state j. The production rate dotn_ij is given by:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    dotn_ij = n_e n_n k_nj(Te) - sum_ell = j + 1^3 n_e n_ij k_jell(T_e)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The first term here represents the rate of production of ions with charge state j and the second term represents the rate at which these ions are further ionized to become ions of charge state ell. In all, the following six reactions are modelled:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginaligned\n    A + e- - A^+ + 2 e-\n    A + e- - A^2+ + 3 e-\n    A + e- - A^3+ + 4 e-\n    A+ + e- - A^2+ + 2 e-\n    A+ + e- - A^3+ + 3 e-\n    A^2+ + e- - A^3+ + 2 e-\nendaligned","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The currently-specified model does not include ion losses to the radial walls, but this could be included at a later date. Likewise, we could also include momentum-transfer collisions between ions and neutrals and between ions of different charge states at a future date, but neglect these for now. Future updates may also add the ability to model molecular propellants, not just monatomic ones, in which case we would need to add significantly more reaction equations, species, and model rotational and vibrational modes.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The one-dimensional momentum equation for ions of charge state j is obtained by assuming the ions are unmagentized and that the momentum transfer due to collisions is negligible. The momentum equation in conservative form is","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartialpartial t (n_ij u_ij) + fracpartialpartial z (n_ij u_ij^2 + fracp_ijm_i) = fracj em_i n_ij E_z","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In this equation, p_ij = n_ij k_B T_i is the partial pressure of ions with charge j, T_i is the ion temperature, e is the fundamental charge, m_i is the ion mass, and E_z is the axial electric field. ","category":"page"},{"location":"physics/#Electrons","page":"Physics model","title":"Electrons","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"We assume that the plasma is quasineutral, which means that the local charge density is zero everywhere. This means that","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_e = sum_j=1^3 jn_ij","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In addition, the electrons are assumed to be massless. This yields a generalized Ohm's law, also known as the Quasineutral Drift Diffusion (QDD) model. The electron momentum equation becomes:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    nu_e fracm_eemathbfj_e = e n_e mathbfE +nabla p_e - mathbfj_e times mathbfB\nendalign","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here, nu_e is the total electron momentum transfer collision frequency, mathbfj_e = -e n_e mathbfu_e is the electron current vector, p_e = n_e k_B T_e is the electron pressure, and B is the magnetic field. We want to model the electron velocity in both the axial (hatz) and azimuthal (theta) directions. Making the assumption that B is purely radial and that the plasma is axisymmetric, we arrive at the following two equations after some algebraic manipulations.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"axial current equation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginaligned\n    j_ez = frace^2 n_em_e nu_efrac11 + Omega_e^2left(E_z + frac1e n_efracpartial p_epartial zright)\n    j_etheta = Omega_e j_ez\nendaligned","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In this expression, Omega_e = omega_cenu_e = e B  m_e nu_e is the Hall parameter, or the ratio of the electron cyclotron frequency to the total electron momentum transfer collision frequency, and measures how well-magnetized the electrons are. Finally, we introduce the anomalous collision frequency (nu_AN):","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    nu_e = nu_c + nu_AN","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In Hall thrusters, the observed axial/cross-field electron current is significantly higher than that which would result from classical collisions alone (here, nu_c represents the classical electron momentum transfer collision frequency). We model this enhanced transport in a fluid framework as an additional ANOMALOUS collision frequency. The purpose of this code is to facilitate the development and testing of models for this important parameter.","category":"page"},{"location":"physics/#Electrostatic-potential","page":"Physics model","title":"Electrostatic potential","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"To compute the electrostatic potential, we first add the continuity equations from the multiple ion species and subtract the electron continuity equation to obtain the charge continuity equation:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"current conservation equation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    sigma = sum_j=1^3 jn_ij - n_e \n    j_iz =  sum_j=1^3 jn_ij u_ij \n    fracpartial sigmapartial t + fracpartialpartial zleft(j_iz - j_ezright) = 0\nendalign","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here, sigma is the charge density, which is zero in our model as we have assumed quasineutrality, and j_iz is the total axial ion current. We substitute the axial current equation into the current conservation equation and noting that E_z = -partial phi  partial z","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartialpartial_z j_iz - fracpartialpartial zleftfrace^2 n_em_e nu_efrac11 + Omega_e^2left(-fracpartial phipartial z + frac1e n_efracpartial p_epartial zright)right = 0","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Defining the cross-field electron mobility","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    mu_perp = fracem_e nu_efrac11 + Omega_e^2","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"we obtain the following second-order elliptic partial differential equation for the potential.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    fracpartialpartial zleft(mu_perp n_e fracpartialphipartial zright) = fracpartialpartial zleft(fracmu_perpefracpartial p_epartial z - fracj_izeright)\nendalign","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"This can be discretized using a finite-difference scheme and written in linear form as underlineunderlineA underlinex = underlineb. The resulting system is tridiagonal and is readily solvable. Details of this procedure can be found in the potential solver description.","category":"page"},{"location":"physics/#Electron-energy-equation","page":"Physics model","title":"Electron energy equation","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The electron temperature equation in one dimension is","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartialpartial tleft(frac32 n_e k_B T_eright) + fracpartialpartial zleft(frac52 n_e k_B T_e u_ez + q_ezright) = fracpartial p_e partial z u_ez + m_e n_e nu_e leftu_eright^2 - S_loss","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Landmark below","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"     fracpartialpartial tleft(frac32 n_e k_B T_eright) + fracpartialpartial zleft(frac52 n_e k_B T_e u_ez - frac109n_e k_B T_efracpartialfrac32 k_B T_epartial zright) = n_e u_ez fracpartialphipartial z - n_e n_n K - n_e W","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here, q_ez is the electron heat conduction in one dimension and S_loss = S_wall + S_coll, where S_wall represents the loss of electron energy to the thruster walls and S_coll captures the loss of energy to inelastic collisions. These terms are defined as follows:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    q_ez = -kappa_eperp nabla_perp T_e \n    kappa_eperp approx frac47 n_e T_em_e omega_ce^2 tau_e \n    tau_e = 1nu_e = frac1nu_ei + nu_en + nu_ee + nu_AN \n    S_coll = sum_j n_j nu_j Delta epsilon_j\nendalign","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In these expressions, kappa_eperp is the cross-field (axial) electron thermal conductivity, for which we employ the Braginskii closure, tau_e is the electron collision time, nu_j is the rate of inelastic collisions between electrons and species j and Delta epsilon_j is the average energy loss due to such collisions. These latter two parameters are computed using BOLSIG++. The wall loss term S_loss will be defined later. These terms slightly change when considering the Landmark case study.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    W = nu_epsilon frac32 k_B T_e expleft(frac-20eVfrac32 k_B T_eright)\nendalign","category":"page"},{"location":"physics/#Sheath-considerations","page":"Physics model","title":"Sheath considerations","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The grid resolution of HallThruster.jl is much lower than what would be required to resolve plasma sheaths properly, which would require a grid size on the order or lower than the debye lenght. However, the sheath and presheath are important to model Hall Thruster discharges accurately. As this is a 1D axial solver, we do not have any direct fluxes towards the walls, the energy losses can however be taken into account by a source term in the energy equation. This term and the boundary conditions implemented at the anode employ the following presheath approximations and assumptions. They are absolutely critical to replicate experimental Hall Thruster behaviour. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In the following, potential differences ephi are assumed to be on the order of the electron temperature k T_e. Furthermore, assume that cold ions fall through an arbitrary potential of phi_0 while they move towards the wall. Through conservation of energy, their arrival velocity at the sheath edge can be related to the potential difference. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"energy conservation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    frac12 m_i v_0^2 = e phi_0","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Additionally, the ion flux during acceleration toward the wall is conserved. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_i v = n_0 v_0","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The relation for ion velocity as a function of position in the sheath can be written as ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"above expression","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    frac12 m_i v^2 = frac12 m_i v_0^2 - ephi (x)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Rewriting both energy conservation and above expression for v_0 and v, and dividing gives","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracv_0v = sqrtfracphi_0phi_0 - phi","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"which by applying flux conservation results in ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"the density equation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_i = n_0 sqrtfracphi_0phi_0 - phi","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Close to the sheath edge the density equation can be expanded as a Taylor series, as phi is small compared to phi_0.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"expanded ion density","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_i = n_0 left(1 - frac12fracphiphi_0 + right)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In one dimension, neglecting collisions with other species and assuming isentropic temperature and pressure terms, no convection and no electron inertia, the electrons can be described by the Boltzmann relation.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Boltzmann relation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_e = n_0 expleft(frace phik T_eright)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In this regime, the electron density is diffusion dominated and dictated by the electrostatic field. This assumption is generally valid along magnetic field lines and across weak magnetic fields with sufficient electron electron collisions. The Boltzmann relation can be expanded by assuming that the change in potential at the sheath edge is small compared to the electron temperature. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"expanded Boltzmann relation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_e = n_0 left(1 - fracephik T_e +  right)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Taking Poisson's equation of the form ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    nabla^2 phi = - fracek Te_0(n_i - n_e)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"and substituting expanded Boltzmann relation and expanded ion density leads after rearranging to ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    nabla^2 phi = frace n_0 phiepsilon_0left(frac12phi_0 - fracekT_eright)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"As the sheath is assumed to be ion attracting, it can by definition not slow or repell ions. As a result, the right hand side of \\autoref{eq:poissonsubexpanded} has to always be positive, which leads to the following requirement. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    phi_0  frackT_e2e","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"By substituting energy conservation equation, the ion Bohm speed can be recovered. This condition is applied to the anode boundary and will be discussed in the boundary conditions. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Bohm velocity","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    v_0  sqrtfrackT_em_i","category":"page"},{"location":"fluxes_and_numerics/#Fluxes-and-numerics","page":"Fluxes and numerics","title":"Fluxes and numerics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HallThruster\nDocTestSetup = quote\n    using HallThruster\nend","category":"page"},{"location":"#HallThruster.jl","page":"Home","title":"HallThruster.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A 1D fluid Hall thruster code written in Julia. This will be filled in as the code is developed further.","category":"page"}]
}
