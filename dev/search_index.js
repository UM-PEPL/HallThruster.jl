var documenterSearchIndex = {"docs":
[{"location":"wall_loss_models/#Wall-Loss-Models","page":"Wall Loss Models","title":"Wall Loss Models","text":"","category":"section"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"HallThruster.jl allows you to choose from three different wall loss models. They approximate the electron energy lost to the thruster walls in radial direction. As the computational axis of the 1D code is axially in the thruster, the wall loss is not directly resolved by the fluid and applied in each cell as an electron energy loss term. ","category":"page"},{"location":"wall_loss_models/#Background","page":"Wall Loss Models","title":"Background","text":"","category":"section"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"The core of the wall loss models in HallThruster.jl is the abstract type WallLossModel. It has three children: NoWallLosses, ConstantSheathPotential, and WallSheath. ConstantSheathPotential has three fields. A wall sheath_potential to be set by the user, and an inner_loss_coeff and outer_loss_coeff which allow to scale the energy loss inside vs. outside the thruster channel. WallSheath has one field material, which is of type WallMaterial.","category":"page"},{"location":"wall_loss_models/#Provided-wall-loss-models","page":"Wall Loss Models","title":"Provided wall loss models","text":"","category":"section"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"HallThruster.jl provides three models out of the box. These are","category":"page"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"Model Supported species Description\nNoWallLosses Any Ignores electron energy losses to the walls. May cause numerical issues.\nConstantSheathPotential Any Employs a simple sheath energy loss model with constant sheath potential, based on the electron Boltzmann equation for electron density in the sheath as a function of electron temperature. Uses constants to scale losses inside and outside the thruster. See also JP Boeuf, Low frequency oscillations in a stationary plasma thruster, Journal of Applied Physics 84, 3541, 1998 and Landmark study\nWallSheath Xenon Conceputally similar loss model as ConstantSheathPotential, but evaluates constants and sheath potential given in the previously mentioned using approximations. The effective collision frequency follows from a half-maxwellian approximation.  The sheath potential  is evaluated as a function of secondary electron emission, which is a function of wall material, and electron temperature. This model is based on Hobbs and Wesson, Heat flow through a Langmuir sheath in the presence of electron emission, Plasma Physics 9 85, 1967 and described in Goebel and Katz, Fundamentals of Electric Propulsion, JPL Science and Technology series, 2008. If thruster.shielded is true, the electron temperature at the walls is assumed to be equal to the electron temperature at the anode, see Thrusters for the option.","category":"page"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"The density relation in the 'WallSheath' model is based upon the electron Boltzmann relation. Note that at this point the model does not differentiate between axial positions inside and outside the thruster. The same loss model is applied over the entire domain. This approximation seems to work ok when comparing to 2D simulations due to isothermal magnetic field lines. More fidelity will most likely be added. ","category":"page"},{"location":"wall_loss_models/#Impact-of-magnetic-shielding","page":"Wall Loss Models","title":"Impact of magnetic shielding","text":"","category":"section"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"The effect on magnetic shielding on the electron energy can be seen below. Compared are time-averaged electron energy profiles for a Xenon SPT-100 type thruster using Boron Nitride walls.","category":"page"},{"location":"wall_loss_models/","page":"Wall Loss Models","title":"Wall Loss Models","text":"(Image: unshielded_vs_shielded)","category":"page"},{"location":"verification/#Verification","page":"Verification","title":"Verification","text":"","category":"section"},{"location":"verification/","page":"Verification","title":"Verification","text":"Tests can be found in the test folder, and are split in unit_tests and order_verification tests. The julia Test environment is used. Order verification studies verify the correct implemenation of the numerics by comparing the theoretical to the actual order of accuracy of the spatial discretization. For more details on the discretization, see Fluxes and Numerics.","category":"page"},{"location":"verification/#Landmark","page":"Verification","title":"Landmark","text":"","category":"section"},{"location":"verification/","page":"Verification","title":"Verification","text":"The code has been compared to the Landmark test case for 1D fluid Hall Thruster discharges. The time-averaged behaviour for the three test cases vs HallThruster.jl is shown below. The differences between the three cases are the electron energy losses to the walls, which differ inside and outside the thruster. See the Landmark page for a detailed description. For the purpose of verficiation, the boundary conditions, source terms, collision models and anomalous collision frequency has been set to match Landmark. The results shown are time-averaged using the rusanov flux and no reconstruction. ","category":"page"},{"location":"verification/","page":"Verification","title":"Verification","text":"Landmark energy loss term:","category":"page"},{"location":"verification/","page":"Verification","title":"Verification","text":"beginaligned\n    W = nu_epsilon expleft(frac-20T_evright) \n    nu_epsilion = begincases\n        alpha_1 times 10^7  z leq L_ch \n        alpha_2 times 10^7  z  L_ch\n    endcases","category":"page"},{"location":"verification/","page":"Verification","title":"Verification","text":"In the following, L_ch refers to the axial position of the thruster exit plane. ","category":"page"},{"location":"verification/","page":"Verification","title":"Verification","text":"Case 1   alpha_1 = 10 alpha_2 = 10 (Image: Landmark1)","category":"page"},{"location":"verification/","page":"Verification","title":"Verification","text":"Case 2   alpha_1 = 05 alpha_2 = 10 (Image: Landmark2)","category":"page"},{"location":"verification/","page":"Verification","title":"Verification","text":"Case 3   alpha_1 = 04 alpha_2 = 10 (Image: Landmark3)","category":"page"},{"location":"config/#Configuration","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"The Config struct contains all of the options you need to run a simulation. On this page, we will explain what options are available and what they do. Note that all arguments must be provided as keywords.","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"There are four absolutely mandatory arguments. These are:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"discharge_voltage: The difference in potential between the anode and cathode, in Volts. This is used to set the left boundary condition. If the cathode potential is zero, then the anode potential is equal to the discharge voltage.\nthruster: This is a Thruster object containing important geometric and magnetic information about the thruster being simulated. See the page about Thrusters for more.\ndomain: This is a Tuple containing the locations of the left and right boundaries of the simulation domain, in meters. For instance, if your simulation domain starts at z = 0.0 and is 5 cm long, you would write domain = (0.0, 0.05).\nanode_mass_flow_rate: The propellant mass flow rate at the anode, in kg/s","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Aside from these arguments, all others have  default values provided. These are detailed below:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"initial_condition: A function used for initializing the simulation. See the page about Initialization for more information.\nncharge: Number of charge states to simulate. Defaults to 1.\npropellant: Propellant gas. Defaults to Xenon. Other options are described on the Gases and Species page.\nscheme: Numerical scheme to employ for integrating the ion equations. This is a HyperbolicScheme struct with fields flux_function, limiter, and reconstruct. Defaults to HyperbolicScheme(flux = rusanov, limiter = minmod, reconstruct = false, WENO = false). For more information, see Fluxes and Numerics.\ncathode_potential: The potential at the right boundary of the simulation. Defaults to 0.0\nanode_Te: The electron temperature at the anode, in eV. Acts as a Dirichlet boundary condition for the energy equation. Defaults to 3.0.\ncathode_Te: The electron temperature at the cathode, in eV. Acts as a Dirichlet boundary condition for the energy equation. Defaults to 3.0.\nwall_loss_model: How radial losses due to sheaths are computed. Defaults to ConstantSheathPotential(sheath_potential=-20.0, inner_loss_coeff = 1.0, outer_loss_coeff = 1.0), which is the loss term from LANDMARK case 1. Other wall loss models are described on the Wall Loss Models page.\nwall_collision_freq: Extra \"wall collisions\" to be added to the total electron momentum transfer collision frequency inside of the channel.  Units of Hz. Defaults to 0.0.\nanom_model: Model for computing the anomalous collision frequency. Defaults to TwoZoneBohm(1/160, 1/16). Further details on the Anomalous Transport page.\nionization_model: Model for ionization. Defaults to IonizationLookup(), which uses a lookup table to compute ionization rate coefficients as a function of electron energy. Other options are described on the Collisions and Reactions page.\nexcitation_model: Model for excitation reactions. Defaults to ExcitationLookup(), which uses a lookup table to compute excitation rate coefficients as a function of electron energy.. Other models are described on the Collisions and Reactions page.\nelectron_neutral_model: Model for elastic scattering collisions between electrons and neutral atoms. Defaults to ElectronNeutralLookup(), which uses a lookup table to compute the elastic scattering rate coefficient. Other models are described on the Collisions and Reactions page.\nelectron_ion_collisions: Whether to include electron-ion collisions. Defaults to true. More information on the Collisions and Reactions page.\nneutral_velocity: Neutral velocity in m/s. Defaults to 300.0\nneutral_temperature: Neutral temperature in Kelvins. Defaults to 300.0.\nion_temperature: Ion temperature in Kelvins. Defaults to 100.0\nelectron_pressure_coupled: Whether to use an electron-pressure-coupled method for the ions.  When using a coupled scheme, ion speed of sound is raised from the thermal speed to the ion acoustic speed, which reduces numerical oscillations around the ion stagnation point. Partial coupling is possible by supplying a value between zero and one, where zero is fully uncoupled and one is fully coupled. Described further in K. Hara, Non-oscillatory quasineutral fluid model of cross-field discharge plasmas, Physics of Plasmas 25, 123508, 2018. Defaults to 1.0.\nimplicit_energy: The degree to which the energy is solved implicitly. 0.0 is a fully-explicit forward Euler, 0.5 is Crank-Nicholson, and 1.0 is backward Euler. Defaults to 1.0.\nmin_number_density: Minimum allowable number density for any species. Defaults to 1e6\nmin_electron_temperature: Minimum allowable electron temperature. Defaults to 1.0.\ncallback: User-provided callback. This can by any standard callback from DifferentialEquations.jl. Defaults to nothing.\nmagnetic_field_scale: Factor by which the magnetic field is increased or decreased compared to the one in the provided Thruster struct. Defaults to 1.0.\nsource_neutrals: Extra user-provided neutral source term. Can be an arbitrary function, but must take (U, params, i) as arguments. Defaults to Returns(0.0). See User-Provided Source Terms for more information.\nsource_ion_continuity: Vector of extra source terms for ion continuity, one for each charge state. Defaults to fill(Returns(0.0), ncharge) . See User-Provided Source Terms for more information.\nsource_ion_momentum: Vector of extra source terms for ion momentum, one for each charge state. Defaults to fill(Returns(0.0), ncharge) . See User-Provided Source Terms for more information.\nsource_potential: Extra source term for potential equation. Defaults to Returns(0.0). See User-Provided Source Terms for more information.\nsource_electron_energy: Extra source term for electron energy equation. Defaults to Returns(0.0). See User-Provided Source Terms for more information.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = HallThruster","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [HallThruster]","category":"page"},{"location":"internals/#HallThruster.Air","page":"Internals","title":"HallThruster.Air","text":"Air::Gas\n\nEarth air at standard temperature and pressure\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Argon","page":"Internals","title":"HallThruster.Argon","text":"Argon::Gas\n\nArgon gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Bismuth","page":"Internals","title":"HallThruster.Bismuth","text":"Bismuth::Gas\n\nBismuth vapor\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Electron","page":"Internals","title":"HallThruster.Electron","text":"Electron::Species\n\nElectron\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Krypton","page":"Internals","title":"HallThruster.Krypton","text":"Krypton::Gas\n\nKrypton gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Mercury","page":"Internals","title":"HallThruster.Mercury","text":"Mercury::Gas\n\nMercury vapor\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.NA","page":"Internals","title":"HallThruster.NA","text":"NA\n\nNumber of atoms in a kg-mol (6.02214076e26 / kmol)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.R0","page":"Internals","title":"HallThruster.R0","text":"R0\n\nUniversal gas constant (8314.46261815324 J / kmol K)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.Xenon","page":"Internals","title":"HallThruster.Xenon","text":"Xenon::Gas\n\nXenon gas\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.e","page":"Internals","title":"HallThruster.e","text":"e\n\nElectron charge (1.602176634e-19 Coulomb)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.kB","page":"Internals","title":"HallThruster.kB","text":"kB\n\nBoltzmann constant (1.380649e-23 J/K)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.me","page":"Internals","title":"HallThruster.me","text":"me\n\nElectron mass (9.10938356e-31 kilograms)\n\n\n\n\n\n","category":"constant"},{"location":"internals/#HallThruster.ExcitationLookup","page":"Internals","title":"HallThruster.ExcitationLookup","text":"ExcitationLookup(;[directories::Vector{String} = String[]])\n\nDefault excitation model for HallThruster.jl. Reads excitation rate coefficients from file. Looks (preferentially) in provided directories and in the reactions subfolder for rate coefficient files\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.Gas","page":"Internals","title":"HallThruster.Gas","text":"Gas\n\nA chemical element in the gaseous state. Container for element properties used in fluid computations.\n\nFields\n\nname::String        Full name of gas (i.e. Xenon)\n\nshort_name::String  Short name/symbol (i.e. Xe for Xenon)\n\nγ::Float64          Specific heat ratio / adiabatic index\n\nM::Float64          Molar mass (grams/mol) or atomic mass units\n\nm::Float64          Mass of atom in kg\n\ncp::Float64         Specific heat at constant pressure in J / kg / K\n\ncv::Float64         Specific heat at constant volume in J / kg / K\n\nR::Float64          Gas constant in J / kg / K\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.Gas-Tuple{Any, Any}","page":"Internals","title":"HallThruster.Gas","text":"Gas(name::String, short_name::String; γ::Float64, M::Float64)\n\nInstantiate a new Gas, providing a name, short name, the adiabatic index, and the molar mass. Other gas properties, including gas constant, specific heats at constant pressure/volume, and mass of atom/molecule in kg will are then computed.\n\njulia> Gas(\"Xenon\", \"Xe\", γ = 5/3, M = 83.798)\nXenon\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.IonizationLookup","page":"Internals","title":"HallThruster.IonizationLookup","text":"IonizationLookup(;[directories::Vector{String} = String[]])\n\nDefault ionization model for HallThruster.jl. Reads ionization rate coefficients from file. Looks (preferentially) in provided directories and in the reactions subfolder for rate coefficient files\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.LandmarkExcitationLookup","page":"Internals","title":"HallThruster.LandmarkExcitationLookup","text":"LandmarkExcitationLookup()\n\nExcitation model for the LANDMARK benchmark.\n\nReads excitation rate coefficients from the landmark/landmark_rates.csv file in the HallThruster.jl main directory. Supports only singly-charged Xenon.\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.LandmarkIonizationLookup","page":"Internals","title":"HallThruster.LandmarkIonizationLookup","text":"LandmarkIonizationLookup()\n\nIonization model for the LANDMARK benchmark.\n\nReads ionization rate coefficients from the landmark/landmark_rates.csv file in the HallThruster.jl main directory. Supports only singly-charged Xenon.\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.NoExcitation","page":"Internals","title":"HallThruster.NoExcitation","text":"NoExcitation <: ExcitationModel\n\nModel for neglecting excitation energy losses\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.Species","page":"Internals","title":"HallThruster.Species","text":"Species\n\nRepresents a gas with a specific charge state. In a plasma, different ionization states of the same gas may coexist, so we need to be able to differentiate between these.\n\njulia> Species(Xenon, 0)\nXe\n\njulia> Species(Xenon, 1)\nXe+\n\njulia> Species(Xenon, 3)\nXe3+\n\n\n\n\n\n","category":"type"},{"location":"internals/#HallThruster.ContinuityOnly-Tuple{}","page":"Internals","title":"HallThruster.ContinuityOnly","text":"ContinuityOnly\n\nA ConservationLawSystem in which only continuity (mass conservation) is solved, while velocity and temperature are held constant. Must specify a constant velocity (in m/s) and temperature (in K).\n\njulia> equation = ContinuityOnly(u = 300, T = 500)\n_ContinuityOnly(u = 300.0 m/s, T = 500.0 K)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.EulerEquations-Tuple{}","page":"Internals","title":"HallThruster.EulerEquations","text":"EulerEquations\n\nA ConservationLawSystem for the inviscid Navier-Stokes equations, better known as the Euler equations. Velocity and temperature are variable, so the values held in the ConservationLawSystem are set to zero and subsequently unused.\n\njulia> equation = EulerEquations()\n_EulerEquations()\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.IsothermalEuler-Tuple{}","page":"Internals","title":"HallThruster.IsothermalEuler","text":"IsothermalEuler\n\nA ConservationLawSystem in which only continuity and inviscid momentum are solved, while temperature is held constant. Must specify a constant temperature (in K).\n\njulia> equation = IsothermalEuler(T = 500)\n_IsothermalEuler(T = 500.0 K)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.SEE_yield-Tuple{HallThruster.WallMaterial, Any}","page":"Internals","title":"HallThruster.SEE_yield","text":"SEE_yield(material::WallMaterial, Tev)\n\nfit function for SEE with different wall materials Goebel Katz equ. 7.3-30\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.backward_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.backward_diff_coeffs","text":"backward_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a backward first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2\n\njulia> backward_diff_coeffs(-2//1, -1//1, 0//1)\n(1//2, -2//1, 3//2)\njulia> backward_diff_coeffs(-3//2, -1//1, 0//1)\n(4//3, -3//1, 5//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.backward_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.backward_difference","text":"backward_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x2\n\nf(x) = x^4\nx0, x1, x2 = 1.9999998, 1.9999999, 2\nbd = backward_difference(f(x0), f(x1), f(x2), x0, x1, x2)\nbd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.central_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.central_diff_coeffs","text":"central_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a central first derivative approximation at the point x1 on a three-point stencil at points x0, x1, and x2\n\njulia> central_diff_coeffs(-1//1, 0//1, 1//1)\n(-1//2, 0//1, 1//2)\njulia> central_diff_coeffs(-1//2, 0//1, 1//1)\n(-4//3, 1//1, 1//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.central_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.central_difference","text":"central_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x1\n\nf(x) = x^4\nx0, x1, x2 = 1.9999999, 2, 2.0000001\ncd = central_difference(f(x0), f(x1), f(x2), x0, x1, x2)\ncd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.channel_area-Tuple{Any, Any}","page":"Internals","title":"HallThruster.channel_area","text":"channel_area(outer_radius, inner_radius, length)\n\nCompute the area of a Hall thruster channel from its dimensions\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.channel_area-Tuple{HallThruster.Geometry1D}","page":"Internals","title":"HallThruster.channel_area","text":"channel_area(geometry::Geometry1D)\n\nCompute the area of the Hall thruster channel from the given Geometry1D object\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.compute_current","page":"Internals","title":"HallThruster.compute_current","text":"compute_current(sol, location)\n\ncompute current at anode or cathode = outflow in  1D code. \n\n\n\n\n\n","category":"function"},{"location":"internals/#HallThruster.compute_wall_sheath_potential-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.compute_wall_sheath_potential","text":"compute_wall_sheath_potential(Tev, γ, mi))\n\ncompute wall sheath to be used for radiative losses and loss to wall. Goebel Katz equ. 7.3-29, 7.3-44. Assumed nₑuₑ/nᵢuᵢ ≈ 0.5 Space charge limited above γ = 0.99. Currently only strictly valid for Xenon\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.coulomb_logarithm","page":"Internals","title":"HallThruster.coulomb_logarithm","text":"coulomb_logarithm(ne, Tev, Z = 1)\n\ncalculate coulomb logarithm for electron-ion collisions as a function of ion charge state Z, electron number density in m^-3, and electron temperature in eV.\n\n\n\n\n\n","category":"function"},{"location":"internals/#HallThruster.downwind_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.downwind_diff_coeffs","text":"downwind_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a downwind first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2 (uses only points x1 and x2)\n\njulia> downwind_diff_coeffs(-1//1, 0//1, 2//1)\n(0//1, -1//2, 1//2)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.effective_loss_frequency-Tuple{Any}","page":"Internals","title":"HallThruster.effective_loss_frequency","text":"effective_loss_frequency(Tev)\n\ncompute effective loss frequency for electron power loss to walls.  based on Half Maxwellian approximation and correction factor 2 for  energy lost per electron compared to average energy. Goebel-Katz equ. 7.3 - 45. \n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.electron_mobility-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.electron_mobility","text":"electron_mobility(νan::Float64, νc::Float64, B::Float64)\n\ncalculates electron transport according to the generalized Ohm's law as a function of the classical and anomalous collision frequencies and the magnetic field.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.forward_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.forward_diff_coeffs","text":"forward_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a forward first derivative approximation  at the point x0 on a three-point stencil at points x0, x1, and x2\n\njulia> forward_diff_coeffs(1.0, 2.0, 3.0)\n(-1.5, 2.0, -0.5)\njulia> forward_diff_coeffs(0//1, 1//2, 3//2)\n(-8//3, 3//1, -1//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.forward_difference-NTuple{6, Any}","page":"Internals","title":"HallThruster.forward_difference","text":"forward_difference(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the derivative at x0\n\nf(x) = x^4\nx0, x1, x2 = 2.0, 2.000001, 2.000002\nfd = forward_difference(f(x0), f(x1), f(x2), x0, x1, x2)\nfd ≈ 32\n\n# output\n\ntrue\n\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_electron-Tuple{Number, Number}","page":"Internals","title":"HallThruster.freq_electron_electron","text":"freq_electron_electron(ne, Tev)\n\nEffective frequency at which electrons are scattered due to collisions with other electrons\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_ion-Tuple{Number, Number, Number}","page":"Internals","title":"HallThruster.freq_electron_ion","text":"freq_electron_ion(ne, Tev, Z)\n\nEffective frequency at which electrons are scattered due to collisions with ions\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.freq_electron_neutral-Union{Tuple{T}, Tuple{Array{HallThruster.ElasticCollision{T}, 1}, Number, Number}} where T","page":"Internals","title":"HallThruster.freq_electron_neutral","text":"freq_electron_neutral(model::ElectronNeutralModel, nn, Tev)\n\nEffective frequency of electron scattering caused by collisions with neutrals\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.generate_grid-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.generate_grid","text":"generate_grid(geometry, ncells)\n\nGenerate a one-dimensional uniform grid on the domain specified in the geomety. Returns number of cells, coordinates of cell centers (plus ghost cells face coordinates), interface/edges and volume of a cell for number density calculations.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.interpolation_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.interpolation_coeffs","text":"interpolation_coeffs(x, x0, x1, y0, y1)\n\nCompute the coefficients for interpolation between two points (x0, y0) and (x1, y1) such that y = c0 * y0 + c1 * y1 ```jldoctest;setup = :(using HallThruster: itpcoeffs, lerp) julia> c0, c1 = interpolationcoeffs(0.5, 0.0, 1.0, 0.0, 2.0) (0.5, 0.5) julia> c0 * 0.0 + c1 * 2.0 == lerp(0.5, 0.0, 1.0, 0.0, 2.0) true\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.lerp-NTuple{5, Any}","page":"Internals","title":"HallThruster.lerp","text":"lerp(x, x0, x1, y0, y1)\n\nInterpolate between two points (x0, y0) and (x1, y1) ```jldoctest;setup = :(using HallThruster: lerp) julia> lerp(0.5, 0.0, 1.0, 0.0, 2.0) 1.0\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.load_reactions-Tuple{HallThruster.IonizationModel, Any}","page":"Internals","title":"HallThruster.load_reactions","text":"load_reactions(model::IonizationModel, species)::Vector{IonizationReaction}\n\nLoad ionization reactions for the provided species and ionization model\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.maximum_charge_state-Tuple{HallThruster.ReactionModel}","page":"Internals","title":"HallThruster.maximum_charge_state","text":"maximum_charge_state(model::ReactionModel)::Int\n\nReturn the maximum supported charge state for a given reaction model. If 0 is returned, then no charge state restriction is applied.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.read_restart-Tuple{AbstractString}","page":"Internals","title":"HallThruster.read_restart","text":"read_restart(path::AbstractString)\n\nLoad a restart file from path.\n\nThe filetype can be anything supported by FileIO, though JLD2 is preferred.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.second_deriv_central_diff-NTuple{6, Any}","page":"Internals","title":"HallThruster.second_deriv_central_diff","text":"second_deriv_central_diff(f0, f1, f2, x0, x1, x2)\n\nGiven three points x0, x1, and x2, and the function values at those points, f0, f1, f2, compute the second-order approximation of the second derivative at x1\n\nf(x) = x^4\nx0, x1, x2 = 1.9999, 2.0, 2.0001\nsd = second_deriv_central_diff(f(x0), f(x1), f(x2), x0, x1, x2)\nsd ≈ 48\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.second_deriv_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.second_deriv_coeffs","text":"second_deriv_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a central second derivative approximation at the point x1 on a three-point stencil at points x0, x1, and x2\n\njulia> second_deriv_coeffs(-2//1, 0//1, 2//1)\n(1//4, -1//2, 1//4)\njulia> second_deriv_coeffs(-1//2, 0//1, 1//1)\n(8//3, -4//1, 4//3)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.solve_potential_edge!-Tuple{Any, Any}","page":"Internals","title":"HallThruster.solve_potential_edge!","text":"solve_potential_edge!(; U::Matrix{Float64}, params::NamedTuple)\n\nfunction to solve the potential equation derived from the generalized Ohm's law and employing charge conservation using quasineutrality. Second derivatives approximated with 2nd order central difference scheme, first derivatives with central difference. Centers of computational mesh placed on edges of fluid mesh, therefore edges correspond to boundaries for fluid. If required, interpolation is used to infer properties at mesh boundaries. Potential is a function of magnetic field, anomalous and classical collision frequency, neutral and ion density as well as ion velocity, and electron density and temperature leading to electron pressure. Solved by applying Thomas algorithm, which is of complexity O(n) and valid if matrix tridiagonal and diagonally dominant. The latter assumption almost always holds unless there is a huge discontinuity in either electron mobility or electron density.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.supported_gases-Tuple{HallThruster.ReactionModel}","page":"Internals","title":"HallThruster.supported_gases","text":"supported_gases(model::ReactionModel)::Vector{HallThruster.Gas}\n\nCheck which gases are supported by a given reaction model. If an empty vector is provided, then there are no restrictions on what gases can be used.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.timeaveraged-Tuple{Any, Any}","page":"Internals","title":"HallThruster.timeaveraged","text":"timeaveraged(sol, tstampstart)\n\ncompute timeaveraged solution, input HallThrusterSolution type and the timestamp at which averaging starts, end at endtime. \n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.upwind_diff_coeffs-Tuple{Any, Any, Any}","page":"Internals","title":"HallThruster.upwind_diff_coeffs","text":"upwind_diff_coeffs(x0, x1, x2)\n\nGenerate finite difference coefficients for a upwind first derivative approximation at the point x2 on a three-point stencil at points x0, x1, and x2 (uses only points x0 and x1)\n\njulia> upwind_diff_coeffs(-3//1, 0//1, 2//1)\n(-1//3, 1//3, 0//1)\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.write_restart-Tuple{AbstractString, Any}","page":"Internals","title":"HallThruster.write_restart","text":"write_restart(path::AbstractString, sol)\n\nWrite a restart file to path`.\n\nThis can be reloaded to resume a simulation. The filetype can be anything supported by FileIO, though JLD2 is preferred.\n\n\n\n\n\n","category":"method"},{"location":"internals/#HallThruster.σ_en-Tuple{Any}","page":"Internals","title":"HallThruster.σ_en","text":"σ_en(Tev)\n\nElectron neutral collision cross section in m² as a function of electron temperature in eV. Eq. 3.6-13, from Fundamentals of Electric Propulsion, Goebel and Katz, 2008.\n\n\n\n\n\n","category":"method"},{"location":"numerics/#Numerics","page":"Numerics","title":"Numerics","text":"","category":"section"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"As described in Configuration and Initialization different flux options are available in HyperbolicScheme. Timemarching for the heavy species is handled by DifferentialEquations.jl. The left hand side of the electron energy equation is integrated implicitly using a Crank Nicolson Adams Bashforth (CNAB) scheme. This enables larger timessteps due to the severe restrictions due to the electron heat flux. ","category":"page"},{"location":"numerics/#Spatial-discretization-for-heavy-species","page":"Numerics","title":"Spatial discretization for heavy species","text":"","category":"section"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"Neutrals and ions are considered heavy species (compared to electrons). HallThruster.jl uses the finite volume method (FVM). FVM has the advantage that it is by definition conservative, which is a useful property when solving hyperbolic conservation laws such as the Euler equations. Currently, only the continuity equation is solved for the neutrals and the isothermal Euler equations for the ion species. Possibly, the full Euler equations will be added in the future, its implementation has been verified using the Sod Shock tube. The following provides and example of the control volume approach applied to the continuity equation. ","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"int_i-frac12^i+frac12 fracpartial n_npartial t dz + int_i-frac12^i+frac12 fracpartial n_n u_npartial z dz = int_i-frac12^i+frac12 dotn_n  dz","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"The n_n u_n can be replaced by a generic flux term F(z) and generalized to any advection like equation. Treatment of the source term is described in Collisions and Reactions. Integration results in","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"hfracpartial n_npartial t + left(F__i+frac12 - F__i-frac12right) = h dotn_n","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"See Fluxes for the implemented fluxes, and possible limiters to be used in reconstruction to ensure a total variation diminishing scheme (TVD).","category":"page"},{"location":"numerics/#Time-discretization-of-heavy-species","page":"Numerics","title":"Time discretization of heavy species","text":"","category":"section"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"Time integration is handled by DifferentialEquations.jl. Strong stability preserving Runge Kutta schemes are used by default (specifically SSPRK22), but the user is free use other schemes provided by DifferentialEquations.jl.","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"Keep in mind that following von-Neumann stability analysis for explicit schemes the CFL number has to be lower than 1. The CFL number is defined as:","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"    sigma = fracu_i Delta tDelta x","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"Using a maximum ion velocity of 22000 m/s, a domain length of 0.05m and 200 cells, results in Delta t leq 12 times 10^-8 s. In practice, it needs to be a bit lower in order to handle transients as the solution oscillates. This restriction is valid for the continuity and isothermal euler equations. Information on setting dt and selecting the integration scheme can be found in the Tutorial.","category":"page"},{"location":"numerics/#Electron-energy-equation-discretization","page":"Numerics","title":"Electron energy equation discretization","text":"","category":"section"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"While the ions can be explicitly solved with Delta t sim 10^-8s, the heat condution term in the electron energy equation adds additional constraints which would lower the timestep by about a factor of 10. In order to not further increase the timestepping restrictions and increase computation time, the electron energy equation is solved semi-implicitly in time using a backward Euler or Crank-Nicholson scheme. See Configuration for information on how to select which scheme is used.","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"The spatial discretization of the electron energy equation uses central finite differences in a manner similar to the potential solver (see below). This, combined with the semi-implicit timestepping, creates a tridiagonal linear system which can be efficiently solved using the Thomas algorithm.","category":"page"},{"location":"numerics/#Potential-solver","page":"Numerics","title":"Potential solver","text":"","category":"section"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"The second order elliptic differential equation for the potential is discretized using a second order centered difference scheme, with all derivatives appearing approximated in a similar fashion. The values are solved for on the edges of the fluid cells, leading to a staggered grid and avoiding interpolation for the most part. The tridiagonal system \\underline{\\underline{A}} \\underline{x} = \\underline{b} is then solved. The left hand side of the potential equation, see Physics model is discretized as follows, the indexing refers to the fluid discretization: ","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"    fracpartialpartial zleft(mu_perp n_e fracpartialphipartial zright)biggvert^delta__i + frac12 approx frac1h left(left(mu_perpvert^delta_i + 1 n_evert^delta_i + 1 fracpartialphipartial zbiggvert^delta__i+1right) - left(mu_perpvert^delta_i n_evert^delta_i fracpartialphipartial zbiggvert^delta__iright) right) + O(h^2)","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"where","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"    fracpartialphipartial zbiggvert^delta__i+1 approx frac1hleft(phi_i+frac32 - phi_i + frac12right) + O(h^2)","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"similarly","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"    fracpartialphipartial zbiggvert^delta__i approx frac1hleft(phi_i + frac12 - phi_i-frac12right) + O(h^2)","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"results in","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"    fracpartialpartial zleft(mu_perp n_e fracpartialphipartial zright)biggvert^delta__i approx frac1h^2 left(mu_perpvert^delta_i + 1 n_evert^delta_i + 1 phi_i + frac32 - (mu_perpvert^delta_i + 1 n_evert^delta_i + 1 + mu_perpvert^delta_i n_evert^delta_i) phi_i + frac12 + mu_perpvert^delta_i n_evert^delta_i phi_i - frac12right)  + O(h^2)","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"The left hand side is incorporated into a \\mathrm{NxN} matrix A, while the RHS is added to the vector b and N = n_{cells} + 1. This results in a tridiagonal matrix that is diagonally dominant, and can therefore be solved using the Thomas algorithm at a computational expense of O(N), rather than O(N^3) for standard Gaussian elimination. The implementation can be found here. ","category":"page"},{"location":"numerics/#Evaluation-of-derivatives","page":"Numerics","title":"Evaluation of derivatives","text":"","category":"section"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"Some computations require the numerical approximation of derivatives, for example the evaluation of the electron velocity from the equation for electron current using the generalized Ohm's law, see Physics model. The derivatives are evaluated to second order using forward difference, central difference or backward difference depending on the location in the domain. ","category":"page"},{"location":"numerics/#Electron-pressure-coupled-method","page":"Numerics","title":"Electron pressure coupled method","text":"","category":"section"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"The generalized Ohm's law described in Physics Model can be rewritten in the following assuming only one charge state for simplicity.","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"E = frac-u_emu - frac1en_inabla (n_i k_B T_e)","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"Substituting above expression into the ion momentum equation results in ","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"    fracpartialpartial t (n_i u_i) + fracpartialpartial z (n_i u_i^2 + fracp_im_i) = fracem_ileft(n_i frac-u_emu - frac1en_inabla (n_i k_B T_e)right)","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"and can be rearranged into ","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"    fracpartialpartial t (n_i u_i) + fracpartialpartial z (n_i u_i^2 + fracp_i + p_em_i) = frac-e n_i u_em_i mu","category":"page"},{"location":"numerics/","page":"Numerics","title":"Numerics","text":"This effectively increases the speed of sound in the ion momentum equation from the ion thermal speed to the ion acoustic speed, which decreases the Mach range covered in the domain and provides a direct feedback from the electron pressure to the ion momentum, thereby suppressing numerical oscillations. It is recommended to set electron_pressure_coupled to 1.0 in Configuration. See K. Hara, Non-oscillatory quasineutral fluid model of cross-field discharge plasmas, Physics of Plasmas 25, 123508, 2018. ","category":"page"},{"location":"boundary_conditions/#Boundary-Conditions","page":"Boundary Conditions","title":"Boundary Conditions","text":"","category":"section"},{"location":"boundary_conditions/","page":"Boundary Conditions","title":"Boundary Conditions","text":"HallThruster.jl solves fluid hyperbolic conservation laws. As such, boundary conditions on at least one side have to be specified. Dirichlet boundary conditions on both sides in the potential equation. ","category":"page"},{"location":"boundary_conditions/#Background","page":"Boundary Conditions","title":"Background","text":"","category":"section"},{"location":"boundary_conditions/","page":"Boundary Conditions","title":"Boundary Conditions","text":"The outflow side, which in the 1D domain conincides with the cathode, is usually left unspecified, i.e. no boundary conditions are applied. On the left side, corresponding to the anode, the neutral mass inflow is fixed, while the ion velocity is forced to be at least the Bohm velocity. The anode mass flow rate can be set in the Configuration. The potential employs Dirichlet boundary conditions at both anode and cathode (subject to change once a more accurate anode sheath model has been implemented). Currently the cathode potential is set to zero, and the anode potential can be set using discharge_voltage in the Configuration. The electron energy uses Dirichlet boundaries as well on both the anode and cathode, usually fixed to 2 or 3 eV. Note that this does not correspond to Dirichlet boundaries on the internal energy equations, since this is solved for the product of internal energy and density. ","category":"page"},{"location":"source_terms/#User-Provided-Source-Terms","page":"User-Provided Source Terms","title":"User-Provided Source Terms","text":"","category":"section"},{"location":"anomalous_transport/#Anomalous-Transport","page":"Anomalous Transport","title":"Anomalous Transport","text":"","category":"section"},{"location":"initialization/#Initialization","page":"Initialization","title":"Initialization","text":"","category":"section"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"HallThruster.jl provides sensible defaults for simulation initialization, or allows you to specify your own initial condition.","category":"page"},{"location":"initialization/#Default","page":"Initialization","title":"Default","text":"","category":"section"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"The default is DefaultInitialization(), which initializes the solution domain as described in the following sections. Below, z_0 and z_N are domain[1] and domain[2], as passed into the Config object (see Configuration), L_ch and A_ch are config.thruster.geometry.channel_length and config.thruster.geometry.channel_area, respectively, and dotm is config.anode_mass_flow_rate.","category":"page"},{"location":"initialization/#Ion-densities","page":"Initialization","title":"Ion densities","text":"","category":"section"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"The ion densities are Gaussian with a constant offset and a scaling factor proportional to the mass flow rate and discharge voltage.  For ions with charge 1, the density is","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"rho_i = 2 times 10^17 m_i sqrtfracV_d300fracdotm5times10^-6left(1 + 5 expleft-left(fracz - z_0 - L_ch2L_ch3right)^2rightright)","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"For ions with charge Z, the density is assumed to scale as","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"rho_i_Z = fracrho_i _Z=1Z^2","category":"page"},{"location":"initialization/#Ion-velocities","page":"Initialization","title":"Ion velocities","text":"","category":"section"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"Ions are initialized with the Bohm velocity at the anode. For an ion of charge Z, this is","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"u_i1 = -u_bohm =- sqrtfracZ eT_eV anodem_i","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"The maximum ion velocity is determined by the discharge voltage V_d:","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"u_imathrmend = u_max = sqrtfrac2 Z e  V_dm_i","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"The initial ion velocity profile between the cathode and the anode is then prescribed as:","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"u_i(z) = begincases\n\tu_bohm + frac23(u_max - u_bohm)left(fracz - z_0L_chright)^2  z-z_0  L_ch \n\tfrac13left(u_bohm + u_maxright)left(1 - fracz - z_0 - L_chz_N - L_chright) + u_maxleft(fracz - z_0 - L_chz_N - L_chright)  z - z_0 ge L_ch\nendcases","category":"page"},{"location":"initialization/#Neutral-density","page":"Initialization","title":"Neutral density","text":"","category":"section"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"The neutral density at the anode is computed in the same way as during a simulation, namely: ","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"rho_n anode = fracdotmu_n A_ch - sum_s fracrho_is u_is_anodeu_n","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"The density at the cathode is assumed to be 1/100 that at the anode. In the domain, the neutral density has a sigmoid shape:","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"rho_n(z) = frac12left(rho_nanode + rho_n cathode + (rho_n anode - rho_n cathode)tanhleft(fracz - z_0 - L_ch2L_ch  6right)right)","category":"page"},{"location":"initialization/#Electron-energy","page":"Initialization","title":"Electron energy","text":"","category":"section"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"The number density is computed from the ion densities. The electron temperature is a Gaussian with height V_d  10 eV plus a linear baseline to make sure the boundary conditions are satisfied:","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"T_e(z) = left(1 - fracz - z_0z_N - z_0right) T_e anode + left(fracz - z_0z_N - z_0right) T_e cathode + fracV_d10expleft-left(fracz - z_0 - L_chL_ch3right)^2right","category":"page"},{"location":"initialization/#Example","page":"Initialization","title":"Example","text":"","category":"section"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"For  a simulation of the SPT-100 with V_d= 500V, three ion charge states, a a mass flow rate of 3 mg/s, an anode electron temperature of 3 eV and a cathode electron temperature of 5 eV, the initial condition looks like:","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"(Image: Example initialization)","category":"page"},{"location":"initialization/#Custom-initial-conditions","page":"Initialization","title":"Custom initial conditions","text":"","category":"section"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"You may define your own initial condition by creating subtypes of HallThruster.InitialCondition. Let's say for some reason we wanted to initialize every state variable in every cell to the z-location of its cell center. We might define our initialization as follows:","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"using HallThruster\n\nstruct MyInitialCondition <: HallThruster.InitialCondition end;","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"We would then add a method to the initialize!(U, params, model) function as follows:","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"import HallThruster.initialize!\n\nfunction HallThruster.initialize!(U, params, model::MyInitialCondition)\n\t(;z_cell) = params # Pull cell centers locations out of params\n    nvars = size(U, 1)\n    for (i, z) in enumerate(z_cell)\n       \tfor j in 1:nvars\n           \tU[j, i] = z_cell[i]\n        end\n    end\n    return U # optional. Since U is modified. the return value is never used, but by Julia convention we also return the mutated object.\nend;","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"We can check the behavior of our new function:","category":"page"},{"location":"initialization/","page":"Initialization","title":"Initialization","text":"# Dummy config and params\nncells = 100\nnvars = 4\nconfig = (;initial_condition = MyInitialCondition())\nz_cell = LinRange(0, 0.05, ncells)\nU = zeros(nvars, ncells)\nparams = (;config, z_cell)\n\n# Method of initialize! which dispatches to initialize!(U, params, config.initial_condition)\n# This is what HallThruster.jl calls when initializing a simulation\nHallThruster.initialize!(U, params)\n\nU[1, :] == U[2, :] == U[3, :] == U[4, :] == collect(z_cell)\n\n# output\n\ntrue","category":"page"},{"location":"fluxes/#Fluxes","page":"Fluxes","title":"Fluxes","text":"","category":"section"},{"location":"fluxes/","page":"Fluxes","title":"Fluxes","text":"HallThruster.jl uses the Finite Volume method, and as such the face values of the fluxes need to be reconstructed. See Numerics for more information. ","category":"page"},{"location":"fluxes/","page":"Fluxes","title":"Fluxes","text":"The fluxes F__i+frac12 and F__i-frac12 are reconstructed at the cell interfaces, and for this flux reconstruction multiple options are available. These are set using the object HyperbolicScheme consisting of fields flux, limiter, reconstruct and WENO.","category":"page"},{"location":"fluxes/","page":"Fluxes","title":"Fluxes","text":"Three different flux approximations are available. ","category":"page"},{"location":"fluxes/","page":"Fluxes","title":"Fluxes","text":"Flux Description\nupwind Simple first order accurate flux approximation, that as a results does not distinguish between cell centered and cell average values and adapts reconstruction according to sign of advection velocity. Very diffusive. No Riemann solver or approximation.\nHLLE Approximate Riemann solver. The Harten-Lax-van Leer-Einfeldt scheme approximates a Riemann problem with three constant states. see reference. The scheme is positively-conservative if stability bounds for maximum and minimum wavespeeds are met, which makes it useful in its application with HallThruster.jl. First order accurate in space. B. Einfeldt. On godunov-type methods for gas dynamics. Journal of Computational Physics, 25:294-318, 1988.\nrusanov Approximate Riemann solver. Also known as the local Lax-Friedrich flux. Has slighlty modified choice of wave speeds. Adds viscosity to a centered flux. More diffusive than HLLE. Chi-Wang Shu, Lecture Notes: Numerical Methods for Hyperbolic Conservation Laws (AM257)","category":"page"},{"location":"fluxes/","page":"Fluxes","title":"Fluxes","text":"These flux approximations are all first order accurate in space (piecewise constant recontruction), but can be extended to piecewise linear reconstruction within a cell. To satisfy stability bounds and keep the scheme total variation diminishing (TVD), it has to be coupled with a limiter. Many limiters have been proposed, the ones implemented in HallThruster.jl are the following: koren, minmod, osher, superbee, van_albada, van_leer. If the field reconstruction is set to true, the selected limiter will be used. ","category":"page"},{"location":"fluxes/","page":"Fluxes","title":"Fluxes","text":"WENO refers to a 5th order weighted essentially non-oscillatory that will be added but not yet functional and should be set to false. Depending on the smoothness of the solution, it is capable of 5th order spacial accuracy HLLE flux as a building block. Chi-Wang Shu. High-order finite difference and finite volume weno schemes and discontinuous galerkin methods for cfd. International Journal of Computational Fluid Dynamics, 17(2):107–118, 2003 Dinshaw S. Balsara and Chi-Wang Shu. Monotonicity preserving weighted essentially non-oscillatory schemes with increasingly high order of accuracy. Journal of Computational Physics, 160(2):405–452, 2000.","category":"page"},{"location":"collisions/#Collisions-and-Reactions","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"HallThruster.jl allows you to choose from a few different models for ionization, excitation and elastic scattering, or supply your own. This allows you to implement different propellants or more charge states for an existing propellant.","category":"page"},{"location":"collisions/#Background","page":"Collisions and Reactions","title":"Background","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Most collisions in HallThruster.jl are handled via the Reaction interface. This is an abstract type with three subtypes: IonizationReaction, ExcitationReaction, and ElasticScattering.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"The core of the ionization model in HallThruster.jl is the IonizationReaction struct. It has four fields: energy,  reactant, product, and rate_coeff. The first is of type Float64 and is the ionization energy of the given reaction in eV. The next two are Species objects, while the last is an arbitrary function. This rate_coeff computes the ionization reaction rate coefficient (in m^3/s) provided the electron energy (in eV).  It is used in heavy species source terms in order to compute the production or destruction of the reactant and product due to ionization, and in the electron energy equation in order to compute electron energy losses due to inelastic ionization collisions.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Excitation reactions are handled similarly. The ExcitationReaction struct has only three fields: energy, reactant and rate_coeff, with the same types as above. Since fluids of different excitation levels are not tracked explicitly, the choice of excitation model only affects the electron energy balance.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Elastic scattering (electron-neutral) collisions are implemented via the ElasticCollision struct, which has two fields: reactant and rate_coeff, as no energy is lost in such collisions. This affects the electron momentum balance and the cross-field transport.","category":"page"},{"location":"collisions/#Ionization","page":"Collisions and Reactions","title":"Ionization","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"HallThruster.jl provides two models out of the box. These are","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Model Supported species Maximum charge state Description\nIonizationLookup Xenon, Krypton (out of the box. With user-provided tables, can support any species) 3 Ionization look-up table for species provided with HallThruster.jl. By default, the tables are stored in the reactions subfolder of the HallThruster.jl directory, but the user may provide additional directories in which to look for tables.\nLandmarkIonizationLookup Xenon 1 Lookup table provided for the LANDMARK benchmark. Table is stored in the landmark subfolder of the HallThruster.jl directory.","category":"page"},{"location":"collisions/#IonizationLookup","page":"Collisions and Reactions","title":"IonizationLookup","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This is the default ionization model. To use the IonizationLookup model, initialize it as follows:","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"ionization_model = IonizationLookup([directories::Vector{AbstractString = String[]}])","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"If the optional argument directories is left empty or unprovided, the HallThruster.jl will only look in the reactions subfolder of the HallThruster.jl main directory. Otherwise, HallThruster.jl will preferentially look in directories before before falling back to the included tables. If two files in user-provided directories have the same name, HallThruster.jl will pick the one in the directory which comes first in directories.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Inside of the folders listed in directories, HallThruster.jl will look for rate coefficient files matching the desired propellant gas and maximum charge state.  The rate coefficient files must be named as follows in order to be found.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"ionization_$(reactant.symbol)_$(product.symbol).dat","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"For example, for a reaction file containing rate coefficients for direct double ionization of Bismuth, you would name the file ionization_Bi_Bi2+.dat, or for Argon II being ionized to Argon III, it would be ionization_Ar2+_Ar3+.dat.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"The rate coefficient files must have the ionization energy in the first row, with a colon separating the descriptor and the number. It must next have a header row (which is skipped on load), followed by two tab-delimited columns. The first should have the electron energy (note: this is 3/2 Te) in eV, and the second should have the  rate coefficient in m^3/s. The first few rows of the ionization_Kr_Kr+.dat folder thus reads","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Ionization energy (eV): 13.9996055\nEnergy (eV) Rate coefficient (m3/s)\n1.0 1.812780887933804e-23\n2.0\t6.784605416289418e-19\n3.0\t2.86241339516785e-17\n4.0\t2.0154931458303006e-16\n5.0\t6.77202352079487e-16\n6.0\t1.5567995341077301e-15\n7.0\t2.8667673314913722e-15\n8.0\t4.5818881444694e-15\n9.0\t6.650747725094247e-15","category":"page"},{"location":"collisions/#LandmarkIonizationLookup","page":"Collisions and Reactions","title":"LandmarkIonizationLookup","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This accounts for single ionization of Xenon only using the lookup table provided by test case 3 of the LANDMARK benchmark. It reads from the file landmark/landmark_rates.csv.  Useful mostly for replicating the LANDMARK benchmark.","category":"page"},{"location":"collisions/#Excitation","page":"Collisions and Reactions","title":"Excitation","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"As with ionization, HallThruster.jl provides two models out of the box. These are","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Model Supported species Description\nExcitationLookup Xenon, Krypton (out of the box. With user-provided tables, can support any species) Excitation look-up table for species provided with HallThruster.jl. By default, the tables are stored in the reactions subfolder of the HallThruster.jl directory, but the user may provide additional directories in which to look for tables.\nLandmarkExcitationLookup Xenon Lookup table provided for the LANDMARK benchmark. Table is stored in the landmark subfolder of the HallThruster.jl directory.","category":"page"},{"location":"collisions/#ExcitationLookup","page":"Collisions and Reactions","title":"ExcitationLookup","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This is the default excitation model. To use the ExcitationLookup model, initialize it as follows:","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"excitation_model = ExcitationLookup([directories::Vector{AbstractString = String[]}])","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This functions nearly identically to the IonizationLookup, with the exception that, since excitation reactions do not change the charge state, the product is the same Species as the reactant and thus is not included in the filename. The filename for excitation reactions is thus:","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"excitation_$(reactant.symbol).dat","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"For example, for a reaction file containing excitation rate coefficients for neutral Argon would be called excitation_Ar.dat. Similarly, a file containing rates for excitation of triply-charged Xenon would be called excitation_Xe3+.dat.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"The rate coefficient files are formatted identically to the ionization rate files. Below are the first few lines of the included excitation_Xe.dat.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Excitation energy (eV): 8.32\nEnergy (eV)\tRate coefficient (m3/s)\n1.0\t2.909965013767145e-20\n2.0\t3.078734312855916e-17\n3.0\t4.1547515755380286e-16\n4.0\t1.6649256403317016e-15\n5.0\t3.9526948476759076e-15\n6.0\t7.124788357557455e-15\n7.0\t1.0908925177391674e-14\n8.0\t1.5042335588913955e-14\n9.0\t1.9316662863621785e-14","category":"page"},{"location":"collisions/#LandmarkIonizationLookup-2","page":"Collisions and Reactions","title":"LandmarkIonizationLookup","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This accounts for excitation of Xenon only using the lookup table provided by test case 3 of the LANDMARK benchmark. It reads from the file landmark/landmark_rates.csv.  Useful mostly for replicating the LANDMARK benchmark. LANDMARK does explicitly provide excitation rates, and instead gives an energy loss coefficient. However, using the provided ionization rate coefficients, we can back out the excitation rate coefficients. These are then used to construct an ExcitationReaction.","category":"page"},{"location":"collisions/#Electron-neutral-elastic-scattering","page":"Collisions and Reactions","title":"Electron-neutral elastic scattering","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"These are ReactionModels of type ElectronNeutralModel. HallThruster.jl provides three models out of the box. These are","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Model Supported species Description\nElectronNeutralLookup Xenon, Krypton (out of the box. With user-provided tables, can support any species) Electron-neutral elastic scattering look-up table for species provided with HallThruster.jl. By default, the tables are stored in the reactions subfolder of the HallThruster.jl directory, but the user may provide additional directories in which to look for tables.\nLandmarkElectronNeutral Xenon Constant rate coefficient of 2.5e-13\nGKElectronNeutral Xenon Uses Eq. 36.13 on pg. 58 from Goebel and Katz to fit Xenon e-n cross section","category":"page"},{"location":"collisions/#ElectronNeutralLookup","page":"Collisions and Reactions","title":"ElectronNeutralLookup","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Like IonizationLookup and ExcitationLookup, this reads a table of reaction rate coefficient vs energy from a file either in the HallThruster.jl reactions directory or in a user-provided directory. The interface and usage is identical to that of the other two lookup models, with the exception that since these collisions do not have an electron energy loss associated with them, we do not need to supply an energy in the first line of the files. Thus, the first few lines of elastic_Kr.dat are:","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Energy (eV)\tRate coefficient (m3/s)\n1.0\t1.7652019589294465e-14\n2.0\t6.286806105711669e-14\n3.0\t1.260621740782443e-13\n4.0\t1.879916985413993e-13\n5.0\t2.421697883866546e-13\n6.0\t2.878523500134384e-13\n7.0\t3.2602160860803316e-13","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Naming is similarly simple, with HallThruster.jl looking for files named as follows","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"elastic_$(species).dat","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Since electron-ion collisions are not handled via the ReactionModel interface, species with charge states greater than 0, if provided, are ignored.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Once a rate coefficient k_en(epsilon) is computed, the electron-neutral collision frequency is simply","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"nu_en = n_n k_en(epsilon)","category":"page"},{"location":"collisions/#LandmarkElectronNeutral","page":"Collisions and Reactions","title":"LandmarkElectronNeutral","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"In this model, as in the LANDMARK benchmark, the electron-neutral collision rate coefficient has a constant value of k_en = 25times 10^-13.","category":"page"},{"location":"collisions/#GKElectronNeutral","page":"Collisions and Reactions","title":"GKElectronNeutral","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This uses a fit to the Xenon average collision cross section as a function of electron temperature taken from Goebel and Katz, Fundamentals of Electric Propulsion (page 58):","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"beginaligned\nnu_en = sigma_en(T_e) n_n sqrtfrac8 e T_epi m_e \nsigma_en(T_e) = 66times 10^-19 leftfracfracT_e4 - 011 + left(fracT_e4right)^16right textrmm^2\nendaligned","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Here, T_e is in eV.","category":"page"},{"location":"collisions/#Electron-ion-collisions","page":"Collisions and Reactions","title":"Electron-ion collisions","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Unlike the above types of collisions, electron-ion colulombic collisions are not strongly dependent on the type of gas, as the interaction distance is much larger than the atomic radius. They are thus handled via a simple Boolean flag in the Config struct: electron_ion_collisions = true or electron_ion_collisions = false. These are computed using the classical formulae (see NRL Plasma Formulary, pg. 33):","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"nu_ei = 29 times 10^-6 Z^2 n_e T_e^-32 lnLambda","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Here, Z is the ion charge state, n_e is the plasma density in m^-3 and T_e is the electron temperature in eV. In the above expression, lnLambda is the well-known Coulomb logarithm, given by","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"beginaligned\nlnLambda = 23 - frac12lnleft(10^-6  Z^2 n_e T_e^-3right)  T_e  10 Z^2 textrm eV \nlnLambda = 24 - frac12lnleft(10^-6  n_e T_e^-2right)  T_e  10  Z^2 textrm eV\nendaligned","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"For plasmas containing multiple charge states, we compute the number-averaged charge state langle Zrangle and use that in the above formula:","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"langle Zrangle equiv left(sum_s Z_s n_sright)  n_e","category":"page"},{"location":"collisions/#Implementing-your-own-collisions","page":"Collisions and Reactions","title":"Implementing your own collisions","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"ElectronNeutralModel, ExcitationModel and IonizationModel are all subtypes of ReactionModel.  Users may specify their own IonizationModel, ElectronNeutralModel, or ExcitationModel by implementing a few key functions required by the ReactionModel interface. Let's say we wanted to implement our own ionization model, called MyIonizationModel, we would first define our struct as a subtype of HallThruster.IonizationModel, along with any fields we might want:","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"struct MyIonizationModel <: HallThruster.IonizationModel\n\t# any fields you might want\nend","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"If we were defining an ExcitationModel, we would instead subtype HallThruster.ExcitationModel, and if we were defining a model for electron-neutral elastic scattering, we would subtype ElectronNeutralModel. Next, we need to define a few helper methods.","category":"page"},{"location":"collisions/#supported_gases(::ReactionModel)::Vector{Gas}","page":"Collisions and Reactions","title":"supported_gases(::ReactionModel)::Vector{Gas}","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This method must return a vector of Gas objects. If not overwritten, this method returns Gas[], which signifies that there are no restrictions on what type of gas works with this method. This is useful for IonizationLookup, which can in principle work for any gas, but not so much for LandmarkLookup, which is Xenon specific. Specifying which gases your model is valid for lets HallThruster.jl check at run time that user-provided propellant works with the provided model, preventing it from silently computing a bad result without the user's knowledge.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"Let's say our model works exclusively with Bismuth","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"import HallThruster: supported_gases\n\nHallThruster.supported_gases(::MyIonizationModel) = [HallThruster.Bismuth]","category":"page"},{"location":"collisions/#maximum_charge_state(::ReactionModel)::Int","page":"Collisions and Reactions","title":"maximum_charge_state(::ReactionModel)::Int","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This method returns an integer corresponding to the maximum allowed charge state. By default, this is zero, indicating that our method can work with any charge state. However, to avoid mistakes down the line, it is best to define this, unless we're defining an ElectronNeutralModel. In our case, let's just work with singly-charged Bismuth.","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"import HallThruster: maximum_charge_state\n\nmaximum_charge_state(::MyIonizationModel) = 1","category":"page"},{"location":"collisions/#load_reactions(model::ReactionModel,-species::Vector{Species})","page":"Collisions and Reactions","title":"load_reactions(model::ReactionModel, species::Vector{Species})","text":"","category":"section"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"This is the most important method to define. load_reactions takes our model along with a vector of Species (generated using the propellant and ncharge fields in the user-provided Config) and returns a vector of IonizationReaction{I} or ExcitationReaction{I}, where I is the type of the rate coefficient function. It is important that the Reactions all have the same type so that the returned vector will have a concrete type, which will prevent dynamic dispatch during runtime and prevent unnecessary slowdowns. This means that if you have multiple reactions with different rate coefficient functions, you should use something like FunctionWrappers.jl.  Let's implement a simple ionization curve with the form","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"k_iz(epsilon) = 4times 10^-20 expleft(frac-73frac23 epsilonright)sqrtfrac8 (frac23epsilon)pi m_e","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"We would implement this as so:","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"using FunctionWrappers\nimport HallThruster: e, me, load_reactions\n\nkiz(ϵ) = 4e-20 * exp(-7.3 / (2/3 * ϵ)) * sqrt(8 * 2/3 * ϵ / pi / me)\n\nfunction load_reactions(model::MyIonizationModel, species)\n    rxn = IonizationReaction(\n    \tenergy = -7.3,\n        #=\n        Since we defined maximum_charge_state and supported_species, we know that\n        species[1] will be Bi and species[2] will be Bi+. Otherwise, an error would have\n        been thrown before this point. Without these methods, we would need have logic \t\t\t \thandling whichever species get passed to the function.\n        =#\n        reactant = species[1],\n        product = species[2],\n        # Use a function wrapper here, though not necessary with only one reaction\n        rate_coeff = FunctionWrapper{Float64, Tuple{Float64}}(kiz)\n    )\n    return rxn\nend","category":"page"},{"location":"collisions/","page":"Collisions and Reactions","title":"Collisions and Reactions","text":"The above advice works identically for defining your own ExcitationModel, with the sole exception that ExcitationReaction objects do not have a product field. Similarly, we can define our own ElectronNeutralModel, noting that ElasticCollisions do not have an energy field or a product field. We would also not need to define maximum_charge_state for an ElectronNeutralModel.","category":"page"},{"location":"physics/#Physics-model","page":"Physics model","title":"Physics model","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"HallThruster.jl solves the quasineutral plasma equations of motion for a Hall Thruster along the thruster's channel centerline (the z-axis). We solve seperate models for neutral particles, ions, and electrons. Neutrals are assumed to have (user-configurable) constant velocity and temperature and are tracked by a single continuity equation. Ions are assumed isothermal and unmagnetized. Multiple ion species with different charge states are supported, and each is tracked by a continuity equation and a momentum equation. We employ the drift-diffusion approximation for electrons, which reduces the electron momentum equation to a generalized Ohm's law. Charge conservation is then used to solve for the electrostatic potential. The electron temperature is determined by solving an equation for the conservation of electron internal energy.","category":"page"},{"location":"physics/#Neutrals","page":"Physics model","title":"Neutrals","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"For neutrals, the continuity equation is solved:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartial n_npartial t + fracpartialpartial z (n_n u_n) = dotn_n","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here, n_n is the neutral number density in m^-3, mathbfu_n is the neutral velocity vector in m/s, and dotn_n is the rate of neutral depletion due to ionization in  m^-3s^-1, which is given by","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    dotn_n = -sum_j = 1^3 n_e n_n k_nj(T_e)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"where n_e is the electron number density j represents the ion charge state (i.e. j = 1 represents singly-charged ions, and so on), T_e is the electron temperature, and k_nj is the rate coefficient of the ionization reaction","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"A + e- - A^j+ + (j + 1) e-","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"where A represents the gas species being simulated. Currently, the code is compatible with Xenon and Krypton. The reaction rate coefficients are generated as a function of electron temperature using the BOLSIG+ code. We read in a table of these rate coefficients with electron temperature and use the Interpolations.jl to generate transform this data into a continuous function. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The neutrals are assumed to have a constant velocity in the axial direction and a constant temperature, and are thus approximated monoenergetic and not Maxwellian. The neutral momentum and energy equations are not solved for. ","category":"page"},{"location":"physics/#Ions","page":"Physics model","title":"Ions","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"We solve continuity and momentum for each ion species. We may have the option for an ion energy equation, but for now they are treated as isothermal. The ion continuity equation for ions with charge j is","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartial n_ijpartial t + fracpartialpartial z (n_ij u_ij) = dotn_ij","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here n_ij, u_ij, and dotn_ij are the number density, velocity, and net rate of production of ions with charge state j. The production rate dotn_ij is given by:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    dotn_ij = n_e n_n k_nj(Te) - sum_ell = j + 1^3 n_e n_ij k_jell(T_e)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The first term here represents the rate of production of ions with charge state j and the second term represents the rate at which these ions are further ionized to become ions of charge state ell. In all, the following six reactions are modelled:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginaligned\n    A + e- - A^+ + 2 e-\n    A + e- - A^2+ + 3 e-\n    A + e- - A^3+ + 4 e-\n    A+ + e- - A^2+ + 2 e-\n    A+ + e- - A^3+ + 3 e-\n    A^2+ + e- - A^3+ + 2 e-\nendaligned","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The currently-specified model does not include ion losses to the radial walls, but this could be included at a later date. Likewise, we could also include momentum-transfer collisions between ions and neutrals and between ions of different charge states at a future date, but neglect these for now. Future updates may also add the ability to model molecular propellants, not just monatomic ones, in which case we would need to add significantly more reaction equations, species, and model rotational and vibrational modes.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The one-dimensional momentum equation for ions of charge state j is obtained by assuming the ions are unmagentized and that the momentum transfer due to collisions is negligible. The momentum equation in conservative form is","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartialpartial t (n_ij u_ij) + fracpartialpartial z (n_ij u_ij^2 + fracp_ijm_i) = fracj em_i n_ij E_z","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In this equation, p_ij = n_ij k_B T_i is the partial pressure of ions with charge j, T_i is the ion temperature, e is the fundamental charge, m_i is the ion mass, and E_z is the axial electric field. ","category":"page"},{"location":"physics/#Electrons","page":"Physics model","title":"Electrons","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"We assume that the plasma is quasineutral, which means that the local charge density is zero everywhere. This means that","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_e = sum_j=1^3 jn_ij","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In addition, the electrons are assumed to be massless. This yields a generalized Ohm's law, also known as the Quasineutral Drift Diffusion (QDD) model. The electron momentum equation becomes:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    nu_e fracm_eemathbfj_e = e n_e mathbfE +nabla p_e - mathbfj_e times mathbfB\nendalign","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here, nu_e is the total electron momentum transfer collision frequency, mathbfj_e = -e n_e mathbfu_e is the electron current vector, p_e = n_e k_B T_e is the electron pressure, and B is the magnetic field. We want to model the electron velocity in both the axial (hatz) and azimuthal (theta) directions. Making the assumption that B is purely radial and that the plasma is axisymmetric, we arrive at the following two equations after some algebraic manipulations.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"axial current equation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginaligned\n    j_ez = frace^2 n_em_e nu_efrac11 + Omega_e^2left(E_z + frac1e n_efracpartial p_epartial zright)\n    j_etheta = Omega_e j_ez\nendaligned","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In this expression, Omega_e = omega_cenu_e = e B  m_e nu_e is the Hall parameter, or the ratio of the electron cyclotron frequency to the total electron momentum transfer collision frequency, and measures how well-magnetized the electrons are. Finally, we introduce the anomalous collision frequency (nu_AN):","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    nu_e = nu_c + nu_AN","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In Hall thrusters, the observed axial/cross-field electron current is significantly higher than that which would result from classical collisions alone (here, nu_c represents the classical electron momentum transfer collision frequency). We model this enhanced transport in a fluid framework as an additional ANOMALOUS collision frequency. The purpose of this code is to facilitate the development and testing of models for this important parameter.","category":"page"},{"location":"physics/#Electrostatic-potential","page":"Physics model","title":"Electrostatic potential","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"To compute the electrostatic potential, we first add the continuity equations from the multiple ion species and subtract the electron continuity equation to obtain the charge continuity equation:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"current conservation equation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    sigma = sum_j=1^3 jn_ij - n_e \n    j_iz =  sum_j=1^3 jn_ij u_ij \n    fracpartial sigmapartial t + fracpartialpartial zleft(j_iz - j_ezright) = 0\nendalign","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here, sigma is the charge density, which is zero in our model as we have assumed quasineutrality, and j_iz is the total axial ion current. We substitute the axial current equation into the current conservation equation and noting that E_z = -partial phi  partial z","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartialpartial_z j_iz - fracpartialpartial zleftfrace^2 n_em_e nu_efrac11 + Omega_e^2left(-fracpartial phipartial z + frac1e n_efracpartial p_epartial zright)right = 0","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Defining the cross-field electron mobility","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    mu_perp = fracem_e nu_efrac11 + Omega_e^2","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"we obtain the following second-order elliptic differential equation for the potential.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    fracpartialpartial zleft(mu_perp n_e fracpartialphipartial zright) = fracpartialpartial zleft(fracmu_perpefracpartial p_epartial z - fracj_izeright)\nendalign","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"This can be discretized using a finite-difference scheme and written in linear form as underlineunderlineA underlinex = underlineb. The resulting system is tridiagonal and is readily solvable. Details of this procedure can be found in the potential solver description.","category":"page"},{"location":"physics/#Electron-energy-equation","page":"Physics model","title":"Electron energy equation","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The electron temperature equation in one dimension is","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracpartialpartial tleft(frac32 n_e k_B T_eright) + fracpartialpartial zleft(frac52 n_e k_B T_e u_ez + q_ezright) = fracpartial p_e partial z u_ez + m_e n_e nu_e leftu_eright^2 - S_loss","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Landmark below","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"     fracpartialpartial tleft(frac32 n_e k_B T_eright) + fracpartialpartial zleft(frac52 n_e k_B T_e u_ez - frac109n_e k_B T_efracpartialfrac32 k_B T_epartial zright) = n_e u_ez fracpartialphipartial z - n_e n_n K - n_e W","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Here, q_ez is the electron heat conduction in one dimension and S_loss = S_wall + S_coll, where S_wall represents the loss of electron energy to the thruster walls and S_coll captures the loss of energy to inelastic collisions. These terms are defined as follows:","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    q_ez = -kappa_eperp nabla_perp T_e \n    kappa_eperp approx frac47 n_e T_em_e omega_ce^2 tau_e \n    tau_e = 1nu_e = frac1nu_ei + nu_en + nu_ee + nu_AN \n    S_coll = sum_j n_j nu_j Delta epsilon_j\nendalign","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In these expressions, kappa_eperp is the cross-field (axial) electron thermal conductivity, for which we employ the Braginskii closure, tau_e is the electron collision time, nu_j is the rate of inelastic collisions between electrons and species j and Delta epsilon_j is the average energy loss due to such collisions. These latter two parameters are computed using BOLSIG++. The wall loss term S_loss will be defined later. These terms slightly change when considering the Landmark case study.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"beginalign\n    W = nu_epsilon frac32 k_B T_e expleft(frac-20eVfrac32 k_B T_eright)\nendalign","category":"page"},{"location":"physics/#Sheath-considerations","page":"Physics model","title":"Sheath considerations","text":"","category":"section"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The grid resolution of HallThruster.jl is much lower than what would be required to resolve plasma sheaths properly, which would require a grid size on the order or lower than the debye lenght. However, the sheath and presheath are important to model Hall Thruster discharges accurately. As this is a 1D axial solver, we do not have any direct fluxes towards the walls, the energy losses can however be taken into account by a source term in the energy equation. This term and the boundary conditions implemented at the anode employ the following presheath approximations and assumptions. They are absolutely critical to replicate experimental Hall Thruster behaviour. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In the following, potential differences ephi are assumed to be on the order of the electron temperature k T_e. Furthermore, assume that cold ions fall through an arbitrary potential of phi_0 while they move towards the wall. Through conservation of energy, their arrival velocity at the sheath edge can be related to the potential difference. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"energy conservation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    frac12 m_i v_0^2 = e phi_0","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Additionally, the ion flux during acceleration toward the wall is conserved. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_i v = n_0 v_0","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"The relation for ion velocity as a function of position in the sheath can be written as ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"above expression","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    frac12 m_i v^2 = frac12 m_i v_0^2 - ephi (x)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Rewriting both energy conservation and above expression for v_0 and v, and dividing gives","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    fracv_0v = sqrtfracphi_0phi_0 - phi","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"which by applying flux conservation results in ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"the density equation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_i = n_0 sqrtfracphi_0phi_0 - phi","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Close to the sheath edge the density equation can be expanded as a Taylor series, as phi is small compared to phi_0.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"expanded ion density","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_i = n_0 left(1 - frac12fracphiphi_0 + right)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In one dimension, neglecting collisions with other species and assuming isentropic temperature and pressure terms, no convection and no electron inertia, the electrons can be described by the Boltzmann relation.","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Boltzmann relation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_e = n_0 expleft(frace phik T_eright)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"In this regime, the electron density is diffusion dominated and dictated by the electrostatic field. This assumption is generally valid along magnetic field lines and across weak magnetic fields with sufficient electron electron collisions. The Boltzmann relation can be expanded by assuming that the change in potential at the sheath edge is small compared to the electron temperature. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"expanded Boltzmann relation","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    n_e = n_0 left(1 - fracephik T_e +  right)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Taking Poisson's equation of the form ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    nabla^2 phi = - fracek Te_0(n_i - n_e)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"and substituting expanded Boltzmann relation and expanded ion density leads after rearranging to ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    nabla^2 phi = frace n_0 phiepsilon_0left(frac12phi_0 - fracekT_eright)","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"As the sheath is assumed to be ion attracting, it can by definition not slow or repell ions. As a result, the right hand side of \\autoref{eq:poissonsubexpanded} has to always be positive, which leads to the following requirement. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    phi_0  frackT_e2e","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"By substituting energy conservation equation, the ion Bohm speed can be recovered. This condition is applied to the anode boundary and will be discussed in the boundary conditions. ","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"Bohm velocity","category":"page"},{"location":"physics/","page":"Physics model","title":"Physics model","text":"    v_0  sqrtfrackT_em_i","category":"page"},{"location":"thrusters/#Thrusters","page":"Thrusters","title":"Thrusters","text":"","category":"section"},{"location":"thrusters/","page":"Thrusters","title":"Thrusters","text":"Predefined thruster models are specified as a Thruster object. The struct has 4 self-explanatory fields: name of type string, geometry of type HallThruster.Geometry1D, magnetic_field of type B (which can be an arbitrary function of z), and shielded which is a Boolean. You can easily add your own thrusters. ","category":"page"},{"location":"thrusters/#SPT-100","page":"Thrusters","title":"SPT-100","text":"","category":"section"},{"location":"thrusters/","page":"Thrusters","title":"Thrusters","text":"For example, the SPT-100 is defined in the following way:","category":"page"},{"location":"thrusters/","page":"Thrusters","title":"Thrusters","text":"const SPT_100 = Thruster(\n    name = \"SPT-100\",\n    geometry = geometry_SPT_100,\n    magnetic_field = B_field_SPT_100 $ (0.015, geometry_SPT_100.channel_length),\n    shielded = false\n)","category":"page"},{"location":"thrusters/","page":"Thrusters","title":"Thrusters","text":"while the geometry is defined here","category":"page"},{"location":"thrusters/","page":"Thrusters","title":"Thrusters","text":"const geometry_SPT_100 = Geometry1D(\n    inner_radius = 0.0345,\n    outer_radius = 0.05,\n    channel_length = 0.025\n)","category":"page"},{"location":"thrusters/","page":"Thrusters","title":"Thrusters","text":"and the magnetic field profile is approximated as follows","category":"page"},{"location":"thrusters/","page":"Thrusters","title":"Thrusters","text":"function B_field_SPT_100(B_max, L_ch, z)\n    B = if z < L_ch\n        B_max * exp(-0.5 * ((z - L_ch) / (0.011))^2) #for SPT_100\n    else\n        B_max * exp(-0.5 * ((z - L_ch) / (0.018))^2)\n    end\n    return B\nend","category":"page"},{"location":"thrusters/#Custom-thrusters","page":"Thrusters","title":"Custom thrusters","text":"","category":"section"},{"location":"thrusters/","page":"Thrusters","title":"Thrusters","text":"You can add your own thruster models by defining the geometry, magnetic field profile and selecting shielded or not. Shielded thrusters are assumed to have lower electron energy losses to the walls, see Wall Loss Models. Note that since HallThruster.jl is a 1D code, the inner_radius and outer_radius merely used for computing the inlet neutral density and thetotal thrust and discharge current computations (from the specific values). Aside from these, they do not majorly effect the simulation results. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HallThruster\nDocTestSetup = quote\n    using HallThruster\nend","category":"page"},{"location":"#HallThruster.jl","page":"Home","title":"HallThruster.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HallThruster.jl is an open-source, 1D fluid Hall thruster code written in Julia. It was initially developed by the University of Michigan's Plasmadynamics and Electric Propulsion Laboratory and is licensed under the MIT license.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install HallThruster.jl, you must first install Julia 1.7 or above from the official Julia site, or by using juliaup. We recommend using the latest Julia release when possible. Once installed, launch Julia and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]add https://github.com/UM-PEPL/HallThruster.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will install HallThruster.jl using Julia's package manager.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"#Tutorial","category":"page"}]
}
